[{"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\index.js":"1","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\App.js":"2","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\auth\\AuthContext.js":"3","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\auth\\authReducer.js":"4","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\config\\token.js":"5","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\AppRouter.js":"6","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\types\\types.js":"7","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\DashboardRoutes.js":"8","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\PublicRoute.js":"9","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\config\\clienteAxios.js":"10","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\PrivateRoute.js":"11","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Login\\index.js":"12","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Inicio\\index.js":"13","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarServicio\\index.js":"14","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Grupo\\index.js":"15","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Usuario\\index.js":"16","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarConvenio\\index.js":"17","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Medico\\index.js":"18","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Servicio\\index.js":"19","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\EspecialidadServicio\\index.js":"20","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\GrupoMant\\index.js":"21","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Layout\\index.js":"22","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Especialidad\\index.js":"23","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarGrupo\\index.js":"24","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Servicio\\RotacionServiciosPorPeriodo\\index.js":"25","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Servicio\\index.js":"26","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Medico\\index.js":"27","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Universidad\\index.js":"28","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\UserService.js":"29","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Especialidad\\index.js":"30","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioDelegadoService.js":"31","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioDoctorService.js":"32","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SchoolAgreementService.js":"33","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\CampusService.js":"34","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\NivelService.js":"35","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\TeamService.js":"36","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\DoctorService.js":"37","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\RoleService.js":"38","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\PlazaService.js":"39","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SchoolService.js":"40","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\AnioAcademicoService.js":"41","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\MesService.js":"42","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioService.js":"43","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Medico\\ImportFromExcel.js":"44","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SpecialtyService.js":"45","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\TableMesList.js":"46","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Header\\index.js":"47","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Sidebar\\index.js":"48","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\MesDiaService.js":"49","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\TableMes.js":"50","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\SelectTd.js":"51"},{"size":234,"mtime":1608256127870,"results":"52","hashOfConfig":"53"},{"size":752,"mtime":1608256127814,"results":"54","hashOfConfig":"53"},{"size":90,"mtime":1608256127815,"results":"55","hashOfConfig":"53"},{"size":500,"mtime":1608534224741,"results":"56","hashOfConfig":"53"},{"size":334,"mtime":1608256127863,"results":"57","hashOfConfig":"53"},{"size":804,"mtime":1608256127896,"results":"58","hashOfConfig":"53"},{"size":82,"mtime":1608256127908,"results":"59","hashOfConfig":"53"},{"size":2782,"mtime":1610230378186,"results":"60","hashOfConfig":"53"},{"size":516,"mtime":1608256127898,"results":"61","hashOfConfig":"53"},{"size":225,"mtime":1612000749158,"results":"62","hashOfConfig":"53"},{"size":585,"mtime":1608256127897,"results":"63","hashOfConfig":"53"},{"size":3863,"mtime":1608563009377,"results":"64","hashOfConfig":"53"},{"size":135,"mtime":1608256127872,"results":"65","hashOfConfig":"53"},{"size":11239,"mtime":1611998652010,"results":"66","hashOfConfig":"53"},{"size":17054,"mtime":1609588323063,"results":"67","hashOfConfig":"53"},{"size":16513,"mtime":1609604333302,"results":"68","hashOfConfig":"53"},{"size":3842,"mtime":1608256127886,"results":"69","hashOfConfig":"53"},{"size":47125,"mtime":1610389565213,"results":"70","hashOfConfig":"53"},{"size":7011,"mtime":1611998447851,"results":"71","hashOfConfig":"53"},{"size":10491,"mtime":1610313539314,"results":"72","hashOfConfig":"53"},{"size":8904,"mtime":1608841704370,"results":"73","hashOfConfig":"53"},{"size":433,"mtime":1608256127822,"results":"74","hashOfConfig":"53"},{"size":161,"mtime":1608256127891,"results":"75","hashOfConfig":"53"},{"size":674,"mtime":1611810061018,"results":"76","hashOfConfig":"53"},{"size":8875,"mtime":1611995575784,"results":"77","hashOfConfig":"53"},{"size":5706,"mtime":1608256127895,"results":"78","hashOfConfig":"53"},{"size":4541,"mtime":1608554646624,"results":"79","hashOfConfig":"53"},{"size":7387,"mtime":1608494517462,"results":"80","hashOfConfig":"53"},{"size":704,"mtime":1608503798054,"results":"81","hashOfConfig":"53"},{"size":6964,"mtime":1611998455722,"results":"82","hashOfConfig":"53"},{"size":235,"mtime":1609079346519,"results":"83","hashOfConfig":"53"},{"size":2023,"mtime":1609584471938,"results":"84","hashOfConfig":"53"},{"size":222,"mtime":1608256127903,"results":"85","hashOfConfig":"53"},{"size":188,"mtime":1608256127899,"results":"86","hashOfConfig":"53"},{"size":193,"mtime":1608256127901,"results":"87","hashOfConfig":"53"},{"size":996,"mtime":1609712418168,"results":"88","hashOfConfig":"53"},{"size":2414,"mtime":1609712418156,"results":"89","hashOfConfig":"53"},{"size":304,"mtime":1608507454238,"results":"90","hashOfConfig":"53"},{"size":190,"mtime":1608256127902,"results":"91","hashOfConfig":"53"},{"size":495,"mtime":1608494517464,"results":"92","hashOfConfig":"53"},{"size":381,"mtime":1609588390016,"results":"93","hashOfConfig":"53"},{"size":183,"mtime":1609559463802,"results":"94","hashOfConfig":"53"},{"size":1547,"mtime":1611995596636,"results":"95","hashOfConfig":"53"},{"size":8965,"mtime":1608938298668,"results":"96","hashOfConfig":"53"},{"size":725,"mtime":1610388926878,"results":"97","hashOfConfig":"53"},{"size":9244,"mtime":1611815829987,"results":"98","hashOfConfig":"53"},{"size":1010,"mtime":1608256127820,"results":"99","hashOfConfig":"53"},{"size":4251,"mtime":1610591349210,"results":"100","hashOfConfig":"53"},{"size":1045,"mtime":1609645357768,"results":"101","hashOfConfig":"53"},{"size":2799,"mtime":1609713946703,"results":"102","hashOfConfig":"53"},{"size":1992,"mtime":1609645357762,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1pykx6h",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"106"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"106"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"106"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"106"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"106"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"106"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"106"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"106"},"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\index.js",[],["220","221"],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\App.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\auth\\AuthContext.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\auth\\authReducer.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\config\\token.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\AppRouter.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\types\\types.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\DashboardRoutes.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\PublicRoute.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\config\\clienteAxios.js",["222"],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\routers\\PrivateRoute.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Login\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Inicio\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarServicio\\index.js",["223","224","225","226","227","228","229"],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Grupo\\index.js",["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253"],"import React, { useEffect, useState } from \"react\";\r\nimport { } from \"antd\";\r\nimport {\r\n  Breadcrumb, Modal, Select ,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  Radio,\r\n  notification,\r\n  AutoComplete,\r\n} from \"antd\";\r\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { getDoctors, getDoctorsByTeam, getDoctorsByTeamTipo, getTeamIdCategoriaTodos, getFindAllByTeamIdGrupo, findAllTipos, \r\n  createDoctor, createDoctorGrupo, borrarDoctorGrupo } from \"../../../services/DoctorService\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./Grupo.css\";\r\n\r\nexport const Grupo = () => {\r\n  const [team1, setTeam1] = useState([]);\r\n  const [categoriaslst, setCategoriaslst] = useState([]);\r\n  const [doctoreslst, setDoctoreslst] = useState([]);  \r\n  const [editar, setEditar] = useState(false);  \r\n  const [visible, setVisible] = useState(false);\r\n  const [categoriaId, setCategoria] = useState(null);  \r\n  const [placeCategoria, setPlaceCategoria] = useState('Seleccione una Categoría');\r\n  const [placeNombre, setPlaceNombre] = useState('Seleccione un Médico');\r\n  const [placeGrupo, setPlaceGrupo] = useState('Seleccione un Grupo');\r\n  const [idTeam, setIdTeam] = useState(null);\r\n  var grupoDoctores = [];\r\n\r\n \r\n  const hanldeSelectTeam = (e) => {\r\n    // setGrupoDoctores([]);\r\n    getFindAllByTeamIdGrupo(e, categoriaId).then( x =>\r\n      {\r\n        console.log(x);        \r\n        grupoDoctores = x;\r\n\r\n        Modal.info({\r\n          title: \"Asignar Grupo\",\r\n          content: (\r\n            <div>\r\n            {grupoDoctores.map((data) => (              \r\n            <table className=\"table table-striped table-hover\">\r\n              <thead>\r\n                <tr>               \r\n                  <th>Doctor</th>\r\n                  <th>Especialidad</th>\r\n                  <th>Acciones</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                      {data.doctores.map((data2) => (\r\n                        <tr>\r\n\r\n                        {\r\n                          data2.nivel.id == 1? (\r\n                            <td style={{textAlign: 'left', backgroundColor:'#CAFFB3'}}>- {data2.paternalSurname} {data2.maternalSurname}, {data2.name}</td>\r\n                          ): data2.nivel.id == 2? (\r\n                            <td style={{textAlign: 'left', backgroundColor:'#FFFFB3'}}>- {data2.paternalSurname} {data2.maternalSurname}, {data2.name}</td>\r\n                          ):(\r\n                            <td style={{textAlign: 'left', backgroundColor:'#FFBBB3'}}>- {data2.paternalSurname} {data2.maternalSurname}, {data2.name}</td>\r\n                          )\r\n                        }\r\n\r\n                        {\r\n                          data2.nivel.id == 1? (                            \r\n                            <td style={{textAlign: 'left', backgroundColor:'#CAFFB3'}}>{data2.specialty.name}</td>\r\n                          ): data2.nivel.id == 2? (                            \r\n                            <td style={{textAlign: 'left', backgroundColor:'#FFFFB3'}}>{data2.specialty.name}</td>\r\n                          ):(                            \r\n                            <td style={{textAlign: 'left', backgroundColor:'#FFBBB3'}}>{data2.specialty.name}</td>\r\n                          )\r\n                        }\r\n                          \r\n                          <td key=\"edit\">\r\n                            <Button type=\"primary\" size=\"large\" onClick={() => \r\n                                {             \r\n                                  formik.values.name = data2.name;             \r\n                                  formik.values.team = data2.team.id;\r\n                                  formik.values.id = data2.id;  \r\n                                  console.log(data2); \r\n                                  setEditar(true);                               \r\n                                  setVisible(true);\r\n                                }\r\n                              }>\r\n                              <EditOutlined />\r\n                            </Button>        \r\n                            </td>\r\n                        </tr>\r\n                      ))}\r\n              </tbody>\r\n            </table>            \r\n            ))}\r\n          </div>\r\n          ),\r\n          onOk() {},\r\n        });\r\n  \r\n      }\r\n      );  \r\n  };\r\n\r\n  const handleCloseDrawer = () => {\r\n    setVisible(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const editarMedico = (e) => {\r\n    console.log(e);\r\n  }\r\n\r\n  \r\n  const hanldeSelectNombre = (e) => {\r\n    console.log(e);\r\n    console.log(e.nativeEvent);    \r\n    console.log(e.nativeEvent.data);\r\n    \r\n    formik.values.name = e.nativeEvent.data;\r\n\r\n};\r\n\r\n  const hanldeSelectCategoria = (e) => {\r\n      console.log(e);\r\n      if(e == 1){\r\n        setPlaceCategoria('Medicina');\r\n        setCategoria(e);\r\n        cargarListado(e);        \r\n      }\r\n      if(e == 2){\r\n        setPlaceCategoria('Cirugía');\r\n        setCategoria(e);\r\n        cargarListado(e); \r\n      }\r\n  };\r\n\r\n  \r\n  \r\n  const hanldeSelectNombreMedico = (e) => {\r\n    console.log(e);\r\n        \r\n    doctoreslst.find(x => {\r\n      if(x.id == e){        \r\n        formik.values.name = x.name;\r\n        formik.values.id = e;\r\n        setPlaceNombre(formik.values.name);\r\n      }\r\n    });\r\n\r\n};\r\n\r\n\r\n  const hanldeSelectTeama = (e) => {\r\n    console.log(e);\r\n    console.log(formik.values.team);\r\n\r\n    team1.find(x => {\r\n\r\n      if(x.idGrupo == e){\r\n        setPlaceGrupo(x.nombreGrupo);\r\n      }\r\n\r\n    });\r\n\r\n    \r\n    formik.values.team  = e;\r\n    \r\n};\r\n\r\n  useEffect(() => {\r\n    setIdTeam(null);\r\n    cargarDoctores();\r\n\r\n      findAllTipos().then( x =>\r\n      {  \r\n        setCategoriaslst(x);\r\n      }\r\n      );\r\n\r\n      getTeamIdCategoriaTodos().then( x => {\r\n        setTeam1(x);\r\n      });\r\n\r\n\r\n  }, []);\r\n\r\n  \r\nconst cargarListado = (cate) => {\r\n    getDoctorsByTeamTipo(1, cate).then( x => {\r\n      console.log(x);\r\n      setTeam1(x) ;\r\n    });\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  // name: Yup.string()\r\n  //   .trim()\r\n  //   .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n  //   .required(\"Nombre requerido.\"),\r\n  // shortName: Yup.string()\r\n  //   .trim()\r\n  //   .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n  //   .required(\"Nombre Abreviado requerido.\"),\r\n});\r\n\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\n\r\nconst formik = useFormik({\r\n  initialValues: {\r\n    name: \"\",\r\n    shortName: \"\",\r\n    status: true,\r\n  },\r\n  validationSchema,\r\n  onSubmit: (value) => {\r\n    console.log(value);\r\n  \r\n    createDoctorGrupo(value.id, value.name, value.team).then((resp) => {\r\n         console.log(resp);                \r\n         setVisible(false);\r\n         cargarListado(categoriaId);\r\n         openNotification(\"Guardado Correctamente\", \"\", \"topRight\");\r\n       });\r\n   \r\n   \r\n    \r\n    formik.resetForm();\r\n  },\r\n});\r\n\r\n\r\n\r\n  const borrarDoctor = (id) => {\r\n    borrarDoctorGrupo(id).then((resp) => {\r\n      console.log(resp);\r\n      setVisible(false);\r\n      cargarListado(categoriaId);\r\n      openNotification(\"Eliminado Correctamente\", \"\", \"topRight\");\r\n    });\r\n  }\r\n\r\n  const cargarDoctores = () => {\r\n    getDoctors().then((resp) => {    \r\n      var resp2 = [];\r\n      resp.forEach(element => {\r\n        if(element.status){\r\n          resp2.push(element);\r\n        }\r\n      });\r\n      \r\n      setDoctoreslst(resp2);\r\n    });\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>       \r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Asignar Grupos</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <Button type=\"primary\" size=\"large\" onClick={() =>           \r\n          {\r\n            formik.values.name = null;\r\n            formik.values.shortName = null;\r\n            formik.values.true = null;\r\n            formik.values.id = null;\r\n            cargarDoctores();\r\n            setEditar(false);\r\n            setVisible(true);\r\n          }\r\n          }>\r\n          <PlusOutlined /> Agregar\r\n        </Button>\r\n      </header>\r\n      <div className=\"content\">\r\n        {/* TIPOS */}\r\n        <Form layout=\"inline\" style={{ marginBottom: \"20px\" }}>\r\n          <Form.Item label=\"Categoría\">\r\n            <Select\r\n              showSearch\r\n              name=\"cateogria\"\r\n              placeholder= {placeCategoria}\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\", marginLeft: \"45px\" }}\r\n              value={idTeam}\r\n              onChange={hanldeSelectCategoria}\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n                {categoriaslst.map((data) => (\r\n                <Select.Option key={data.name} value={data.id}>\r\n                {data.name}\r\n                </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n        \r\n        {/* //grupos */}\r\n        <Form layout=\"inline\" style={{ marginBottom: \"20px\" }}>\r\n          <Form.Item label=\"Filtrar por Grupo\">\r\n            <Select\r\n              showSearch\r\n              name=\"specialty\"\r\n              placeholder=\"Seleccione un Grupo\"\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\" }}\r\n              value={idTeam}\r\n              onChange={hanldeSelectTeam}\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }>\r\n            {team1.map((data) => (\r\n              <Select.Option key={data.idGrupo} value={data.idGrupo}>\r\n             {data.nombreGrupo}\r\n              </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n          \r\n\r\n              <p >Leyenda de colores: Residente Nivel 1:  \r\n                <span style={{color: \"#CAFFB3\", border: \"1px solid black\", borderRadius:\"10px\", paddingLeft: \"10px\", paddingRight:\"10px\", color:\"black\", backgroundColor:\"#CAFFB3\", marginLeft:\"5px\", marginRight:\"5px\"}}></span>\r\n                  | Residente Nivel 2: \r\n                <span style={{color: \"#FFFFB3\", border: \"1px solid black\", borderRadius:\"10px\", paddingLeft: \"10px\", paddingRight:\"10px\", color:\"black\", backgroundColor:\"#FFFFB3\", marginLeft:\"5px\", marginRight:\"5px\"}}></span>\r\n                   | Residente Nivel 3:\r\n                <span style={{color: \"#FFBBB3\", border: \"1px solid black\", borderRadius:\"10px\", paddingLeft: \"10px\", paddingRight:\"10px\", color:\"black\", backgroundColor:\"#FFBBB3\", marginLeft:\"5px\", marginRight:\"5px\"}}></span>\r\n                   </p>\r\n\r\n        <div\r\n          className=\"table-group table-responsive\"\r\n          style={{ textAlign: \"center\", display: \"flex\" }}>\r\n\r\n            {team1.map((data) => (\r\n                <table className=\"table table-striped table-hover\" border=\"1\" style={{width: \"340px\", marginRight: \"10px\"}}>\r\n                <thead>\r\n                  <tr >\r\n                    <th> {data.nombreGrupo}</th>\r\n                    <th> Acciones</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.doctores.map((data2) => (\r\n                    <tr >\r\n                       {\r\n                data2.nivel.id == 1? (\r\n                    <td key={data2.id} style={{textAlign: 'left', backgroundColor:'#CAFFB3'}}>\r\n                    {data2.name} {data2.paternalSurname}\r\n                    </td>\r\n                ): data2.nivel.id == 2? (\r\n                  <td key={data2.id} style={{textAlign: 'left', backgroundColor:'#FFFFB3'}}>\r\n                  {data2.name} {data2.paternalSurname}\r\n                  </td>\r\n                ):(\r\n                  <td key={data2.id} style={{textAlign: 'left', backgroundColor:'#FFBBB3'}}>\r\n                  {data2.name} {data2.paternalSurname}\r\n                  </td>\r\n                )\r\n              }\r\n                                                                  \r\n                      <td key=\"edit\">\r\n\r\n                      <Button type=\"primary\" size=\"large\" onClick={() => \r\n                          {                    \r\n                            formik.values.name = data2.name;             \r\n                            formik.values.team = data2.team.id;\r\n                            formik.values.id = data2.id;\r\n                            console.log(data2);\r\n                            setEditar(true);\r\n                            setVisible(true);          \r\n                          }\r\n                        \r\n                        }>\r\n                        <EditOutlined />\r\n                      </Button>        \r\n\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              ))}\r\n      \r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Drawer\r\n          title=\"Médico\"\r\n          placement=\"right\"\r\n          closable={false}\r\n\r\n          width={400}\r\n          onClose={handleCloseDrawer}\r\n          visible={visible}\r\n        >\r\n          <Form\r\n            title=\"Medico\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Form.Item label=\"Nombre:\" required>\r\n\r\n            {\r\n                editar? (\r\n              \r\n                  <Input\r\n                  name=\"name\"\r\n                  disabled                 \r\n                  value={formik.values.name}\r\n                  onChange={formik.handleChange}\r\n                />\r\n                ) :    \r\n                <Select\r\n              showSearch\r\n              name=\"medico\"\r\n              placeholder= {placeNombre}\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\"}}\r\n              value={formik.values.name}\r\n              onChange={hanldeSelectNombreMedico}\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n                {doctoreslst.map((data) => (\r\n                <Select.Option key={data.id} value={data.id}>\r\n                {data.name}\r\n                </Select.Option>\r\n                ))}\r\n            </Select>\r\n              } \r\n                {formik.errors.name && formik.touched.name ? (\r\n                  <div className=\"error-field\">{formik.errors.name}</div>\r\n                ) : null}\r\n            </Form.Item>\r\n           \r\n            <Form.Item label=\"Categoría\">\r\n            <Select\r\n              showSearch\r\n              name=\"cateogria\"\r\n              placeholder= {placeCategoria}\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\"}}\r\n              value={formik.values.categoria}\r\n              onChange={hanldeSelectCategoria}\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n                {categoriaslst.map((data) => (\r\n                <Select.Option key={data.name} value={data.id}>\r\n                {data.name}\r\n                </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Grupo\">\r\n            <Select\r\n              showSearch\r\n              name=\"specialty2\"\r\n              placeholder=\"Seleccione un Grupo\"\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\" }}\r\n              value={formik.values.team}\r\n              onChange={hanldeSelectTeama}  \r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }>\r\n            {team1.map((data) => (\r\n              <Select.Option key={data.nombreGrupo} value={data.idGrupo}>\r\n             {data.nombreGrupo}\r\n              </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n               {\r\n                editar? (\r\n                <Button type=\"primary\" htmlType=\"submit\"  block> Actualizar</Button>\r\n                ) : <Button type=\"primary\" htmlType=\"submit\"  block> Registrar</Button>\r\n              } \r\n              <Button type=\"danger\" \r\n              onClick={() => \r\n                {     console.log(formik.values.idta2); \r\n                  borrarDoctor(formik.values.id);           \r\n                \r\n                }\r\n              }\r\n              block> Eliminar</Button>\r\n\r\n            \r\n          </Form>\r\n        </Drawer>\r\n\r\n    </div>\r\n\r\n\r\n\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Usuario\\index.js",["254","255","256","257","258","259","260","261"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  Radio,\r\n  notification,\r\n  Checkbox,\r\n  Row,\r\n  Col,\r\n} from \"antd\";\r\nimport { EditOutlined, PlusOutlined, EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\r\nimport { getRoleById, getRoles } from \"../../../services/RoleService\";\r\nimport { getUserById, getUsers, findById, updateUser, createUser } from \"../../../services/UserService\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"../Mantenimiento.css\";\r\nimport { useFormik } from \"formik\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nconst openErrorNotification = (msg, description, placement) => {\r\n  notification.error({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nexport const Usuario = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [visibleNewForm, setVisibleNewForm] = useState(false);\r\n  const [visibleUpdateForm, setVisibleUpdateForm] = useState(false);\r\n  const [editar, setEditar] = useState(false);\r\n  const [filterTable, setFilterTable] = useState(null);  \r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [selectedRoles, setSelectedRoles] = useState([]);\r\n\r\n  const [roles, setRoles] = useState([]);\r\n\r\n  const listar = () => {\r\n    getUsers().then((resp) => {\r\n      console.log(resp);\r\n      resp.forEach((data) => {\r\n        data.key = data.id;\r\n      });\r\n      setDataSource(resp);\r\n    });\r\n  };\r\n\r\n  function roleOptions(data){\r\n    let response = [];\r\n    data.forEach( (role) => {\r\n      // console.log(role);\r\n      response.push( {\r\n        label : role.name,\r\n        value : role.id\r\n      });\r\n    });\r\n    return response;\r\n  };\r\n\r\n  function getUser(id)\r\n  {\r\n    getUserById(id).then((data) => {\r\n      setDataDoctorToForm(data);\r\n      setVisibleUpdateForm(true);\r\n    });\r\n  }\r\n\r\n  function roleOptionsChecked(data){\r\n    let response = [];\r\n    console.log(data);\r\n    data.forEach( (role) => {      \r\n      response.push( role.id );\r\n    });\r\n    return response;\r\n  };\r\n\r\n  function onChangeRoles(checkedValues) {\r\n    console.log(checkedValues);\r\n    let chk = [];\r\n    formik.values.roles = [];\r\n    checkedValues.forEach(rol => {      \r\n      formik.values.roles.push({id : rol});\r\n      chk.push(rol);\r\n    });    \r\n\r\n    setSelectedRoles(chk);\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Nombre de Usuario requerido.\"),\r\n    password: Yup.string()      \r\n      .min(8, \"Debe tener al menos 8 caracteres.\")\r\n      .required(\"Contraseña requerido.\"),\r\n    name: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Nombre requerido.\"),\r\n    lastName: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Apellido requerido.\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {  \r\n      action : \"new\",\r\n      username : \"\",\r\n      password : \"\",\r\n      name : \"\",\r\n      lastName : \"\",\r\n      status : true,\r\n      roles: []\r\n  },\r\n    validationSchema,\r\n    onSubmit: (value) => {\r\n      console.log(value);\r\n      delete value.key;      \r\n      value.username = value.username.trim();      \r\n      if(value.action == \"new\" || editar == false)\r\n      { delete value.action;      \r\n        createUser(value).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisibleNewForm(false);\r\n          openNotification(\"Registrado Correctamente\", \"\", \"topRight\");\r\n          formik.resetForm();\r\n        }).catch(function (error) {\r\n          if (error.response) \r\n          {\r\n            openErrorNotification(error.response.data.message, \"\", \"topRight\");            \r\n          }\r\n        });\r\n      }\r\n      else if(value.action == \"update\" || editar == true)\r\n      { delete value.action;      \r\n        updateUser(value).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisibleUpdateForm(false);\r\n          openNotification(\"Actualizado Correctamente\", \"\", \"topRight\");\r\n          formik.resetForm();\r\n        }).catch(function (error) {\r\n          if (error.response) \r\n          { openErrorNotification(error.response.data.message, \"\", \"topRight\");\r\n            // console.log(error.response.status);\r\n            // console.log(error.response.headers);\r\n          }\r\n        });\r\n      }      \r\n    },\r\n  });\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 50,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre de Usuario\",\r\n      dataIndex: \"username\",\r\n      key: \"username\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombres\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },    \r\n    {\r\n      title: \"Apellido\",\r\n      dataIndex: \"lastName\",\r\n      key: \"lastName\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      width: 120,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.status ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.status);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (\r\n         <Button type=\"primary\" size=\"large\" onClick={() => { showUpdateForm(record); }}>\r\n        <EditOutlined />\r\n       </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const keyUpTable = (value) => {\r\n    setFilterTable(\r\n      dataSource.filter((o) =>\r\n        Object.keys(o).some((k) =>\r\n          String(o[k]).toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCloseDrawerNewForm = (e) => {    \r\n    setVisibleNewForm(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const handleCloseDrawerUpdateForm = (e) => {    \r\n    setVisibleUpdateForm(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const showUpdateForm = (user) => {    \r\n    getUser(user.id);\r\n    console.log(user);    \r\n  };\r\n\r\n  function setDataDoctorToForm(doctor)\r\n  { formik.values.id = doctor.id;\r\n    formik.values.username = doctor.username;\r\n    formik.values.password = doctor.password;\r\n    formik.values.name = doctor.name;\r\n    formik.values.lastName = doctor.lastName;\r\n    formik.values.status = doctor.status;\r\n    formik.values.roles = doctor.roles;\r\n    formik.values.action = \"update\";\r\n    let chkRoles = [];\r\n    doctor.roles.forEach(r => {chkRoles.push(r.id); console.log(r)});\r\n    console.log(chkRoles);\r\n    setSelectedRoles(chkRoles);\r\n    setEditar(true);\r\n  }\r\n\r\n  function cleanDataDoctorToForm()\r\n  { formik.values.id = null;\r\n    formik.values.username = '';\r\n    formik.values.password = '';\r\n    formik.values.name = '';\r\n    formik.values.lastName = '';\r\n    formik.values.status = true;\r\n    formik.values.roles = [];\r\n    formik.values.action = \"new\";\r\n    setEditar(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setLoading(false);    \r\n    listar();\r\n    getRoles().then(setRoles);\r\n    // console.log(roles);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Usuario</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <Button type=\"primary\" size=\"large\" onClick={() =>{ cleanDataDoctorToForm(); setVisibleNewForm(true)}}>\r\n          <PlusOutlined /> Agregar\r\n        </Button>\r\n      </header>\r\n      <div className=\"content\">\r\n        <Input.Search\r\n          className=\"searchInput\"\r\n          placeholder=\"Buscar por ...\"\r\n          onKeyUpCapture={(e) => keyUpTable(e.target.value)}\r\n        />\r\n        <Table\r\n          loading={loading}\r\n          dataSource={filterTable === null ? dataSource : filterTable}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 800 }}\r\n        />\r\n        <Drawer\r\n          title=\"Agregar Usuario\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={400}\r\n          onClose={handleCloseDrawerNewForm}\r\n          visible={visibleNewForm}\r\n        >\r\n          <Form\r\n            title=\"Usuario\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Row gutter={12} style={{display:'none'}}>\r\n              <Col span={12}>\r\n                <Form.Item required>\r\n                  <Input\r\n                    name=\"action\"\r\n                    value={formik.values.action}\r\n                    onChange={formik.handleChange}                    \r\n                  />                  \r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Nombre de Usuario:\" required>\r\n              <Input\r\n                name=\"username\"\r\n                value={formik.values.username}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.username && formik.touched.username ? (\r\n                <div className=\"error-field\">{formik.errors.username}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Contraseña:\" required>\r\n              <Input.Password\r\n                name=\"password\"\r\n                value={formik.values.password}\r\n                onChange={formik.handleChange}\r\n                iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n              />\r\n              {formik.errors.password && formik.touched.password ? (\r\n                <div className=\"error-field\">{formik.errors.password}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Nombres:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Apellidos:\" required>\r\n              <Input\r\n                name=\"lastName\"\r\n                value={formik.values.lastName}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.lastName && formik.touched.lastName ? (\r\n                <div className=\"error-field\">{formik.errors.lastName}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Roles:\" required>\r\n              {/* checkhere */}\r\n              <Checkbox.Group options={roleOptions(roles)} defaultValue={[2]} onChange={onChangeRoles} />\r\n              {formik.errors.roles && formik.touched.roles ? (\r\n                <div className=\"error-field\">{formik.errors.roles}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" block> Registrar</Button>\r\n          </Form>\r\n        </Drawer>\r\n\r\n        <Drawer\r\n          title=\"Actualizar Usuario\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={400}\r\n          onClose={handleCloseDrawerUpdateForm}\r\n          visible={visibleUpdateForm}\r\n        >\r\n          <Form\r\n            title=\"Usuario\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Row gutter={12} style={{display:'none'}}>\r\n              <Col span={12}>\r\n                <Form.Item required>\r\n                  <Input\r\n                    name=\"action\"\r\n                    value={formik.values.action}\r\n                    onChange={formik.handleChange}                    \r\n                  />                  \r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"ID:\" required >\r\n                  <Input\r\n                    disabled\r\n                    name=\"id\"\r\n                    value={formik.values.id}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.document && formik.touched.document ? (\r\n                    <div className=\"error-field\">{formik.errors.document}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>              \r\n              <Col span={12}>\r\n                <Form.Item label=\"Nombre de Usuario:\" required>\r\n                  <Input\r\n                    name=\"username\"\r\n                    value={formik.values.username}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.username && formik.touched.username ? (\r\n                    <div className=\"error-field\">{formik.errors.username}</div>\r\n                  ) : null}\r\n              </Form.Item>\r\n              </Col>\r\n            </Row>            \r\n            <Form.Item label=\"Contraseña:\" required>\r\n              <Input.Password\r\n                  placeholder=\"Ingrese la nueva contraseña\"\r\n                  name=\"password\"\r\n                  value={formik.values.password}\r\n                  onChange={formik.handleChange}   \r\n                  iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n                />\r\n                {formik.errors.password && formik.touched.password ? (\r\n                  <div className=\"error-field\">{formik.errors.password}</div>\r\n                ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Nombres:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Apellidos:\" required>\r\n              <Input\r\n                name=\"lastName\"\r\n                value={formik.values.lastName}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.lastName && formik.touched.lastName ? (\r\n                <div className=\"error-field\">{formik.errors.lastName}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Roles:\" required>\r\n              <Checkbox.Group options={roleOptions(roles)}               \r\n              value={selectedRoles}\r\n              //defaultValue={selectedRoles} \r\n              onChange={onChangeRoles} />\r\n              {formik.errors.roles && formik.touched.roles ? (\r\n                <div className=\"error-field\">{formik.errors.roles}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" block> Actualizar</Button>\r\n              \r\n\r\n            \r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n};","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarConvenio\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Medico\\index.js",["262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  Radio,\r\n  Select,\r\n  DatePicker,\r\n  Row,\r\n  Col,\r\n  notification,\r\n  Tooltip,\r\n  Modal,\r\n  Upload,\r\n  message\r\n} from \"antd\";\r\nimport { EditOutlined, PlusOutlined, ClockCircleOutlined, UploadOutlined  } from \"@ant-design/icons\";\r\nimport { useFormik } from \"formik\";\r\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\r\nimport { updateDoctor, createDoctor, getDoctors, upgradeDoctorLevel, saveImportedDoctor } from \"../../../services/DoctorService\";\r\nimport { getSchoolsAgreements } from \"../../../services/SchoolAgreementService\";\r\nimport { getSpecialties } from \"../../../services/SpecialtyService\";\r\nimport { getPlazas } from \"../../../services/PlazaService\";\r\nimport { getCampus } from \"../../../services/CampusService\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\n\r\nimport \"../Mantenimiento.css\";\r\nimport { getNiveles } from \"../../../services/NivelService\";\r\nimport { getTeams } from \"../../../services/TeamService\";\r\nimport ImportFromExcel from \"./ImportFromExcel\";\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nconst openErrorNotification = (msg, description, placement) => {\r\n  notification.error({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nexport const Medico = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [visibleNewForm, setVisibleNewForm] = useState(false);\r\n  const [visibleUpdateForm, setVisibleUpdateForm] = useState(false);\r\n  const [filterTable, setFilterTable] = useState(null);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [editar, setEditar] = useState(false);\r\n  const [isImportDataModalVisible, setIsModalImportDataVisible] = useState(false);\r\n\r\n  const [schoolsAgreements, setSchoolsAgreements] = useState([]);\r\n  const [specialties, setSpecialties] = useState([]);\r\n  const [plazas, setPlazas] = useState([]);\r\n  const [campus, setCampus] = useState([]);\r\n  const [teams, setTeams] = useState([]);\r\n  const [niveles, setNiveles] = useState([]);\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [isFormInvalid, setFormInvalid] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const [cols, setCols] = useState(false);\r\n  const [uploadedFileName, setUploadedFileName] = useState(null);\r\n  \r\n\r\n  const listar = () => {\r\n    getDoctors().then((resp) => {\r\n      resp.forEach((data) => {\r\n        data.key = data.id;\r\n        data.schoolName = data.schoolAgreement == null ? \"Sin definir\" : data.schoolAgreement.school.shortName;\r\n        data.specialtyName = data.specialty == null ? \"Sin definir\" : data.specialty.name;\r\n        data.plazaName = data.plaza == null ? \"Sin definir\" : data.plaza.name;\r\n        data.campusName = data.campus == null ? \"Sin definir\" : data.campus.name;\r\n        data.lastName = data.paternalSurname == null ? \"Sin definir\" : data.paternalSurname + \" \" + data.maternalSurname;\r\n        // data.teamName = \"Grupo \" + data.team.name;\r\n        data.nivelName = data.nivel == null ? \"Sin definir\" : data.nivel.name;\r\n        data.phone = data.phone == null || data.phone.trim() == \"\" ? \"Sin definir\" : data.phone;\r\n        data.email = data.email == null || data.email.trim() == \"\" ? \"Sin definir\" : data.email;\r\n        data.birthDate = data.birthDate == null || data.birthDate.trim() == \"\" ? \"Sin definir\" : data.birthDate;\r\n        data.address = data.address == null || data.address.trim() == \"\" ? \"Sin definir\" : data.address;\r\n\r\n        \r\n      });\r\n      setDataSource(resp);\r\n      console.log(resp);\r\n    });\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    document: Yup.string()\r\n      .trim()\r\n      .matches(/^[0-9]*$/, \"Solo se admiten números.\")\r\n      .length(8, \"Se requiere 8 dígitos.\")\r\n      .required(\"DNI requerido.\"),\r\n    paternalSurname: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Apellido Paterno requerido.\"),\r\n    maternalSurname: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Apellido Materno requerido.\"),\r\n    name: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Nombre requerido.\"),\r\n    schoolAgreement: Yup.object().shape({\r\n      id: Yup.number().nullable().required(\"Universidad requerida\"),\r\n    }),\r\n    specialty: Yup.object().shape({\r\n      id: Yup.number().nullable().required(\"Especialidad requerida\"),\r\n    }),\r\n    plaza: Yup.object().shape({\r\n      id: Yup.number().nullable().required(\"Plaza requerida.\"),\r\n    }),\r\n    campus: Yup.object().shape({\r\n      id: Yup.number().nullable().required(\"Sede requerida.\"),\r\n    }),\r\n    // team: Yup.object().shape({\r\n    //   id: Yup.number().nullable().required(\"Grupo requerido.\"),\r\n    // }),\r\n    address: Yup.string()\r\n      .trim()\r\n      // .matches(\r\n      //   /^[a-zA-Z\\s](\\d)?$/,\r\n      //   \"No se admiten caracteres especiales.\"\r\n      // ),\r\n      .min(5, \"El campo debe tener al menos 5 caracteres.\")\r\n      .required(\"Dirección es un campo requerido\"),\r\n    cmp: Yup.string()\r\n      .trim()\r\n      .matches(/^[0-9]*$/, \"Solo se admiten números.\")\r\n      .min(5, \"Solo se admite min. 5 dígitos.\")\r\n      .max(6, \"Solo se admite máx. 6 dígitos.\")\r\n      .required(\"CMP requerido\"),\r\n    email: Yup.string()\r\n      .trim()\r\n      .email(\"Formato no válido. (ej. correo@example.com)\")\r\n      .required(\"Correo requerido.\"),\r\n    phone: Yup.string()\r\n      .length(9, \"Se requiere 9 dígitos.\")\r\n      .required(\"N° Celular requerido.\"),\r\n  });\r\n  \r\n  const formik = useFormik({\r\n    initialValues: {\r\n      action : \"new\",\r\n      document: \"\",\r\n      paternalSurname: \"\",\r\n      maternalSurname: \"\",\r\n      name: \"\",\r\n      schoolAgreement: {\r\n        id: null,\r\n      },\r\n      specialty: {\r\n        id: null,\r\n      },\r\n      plaza: {\r\n        id: null,\r\n      },\r\n      campus: {\r\n        id: null,\r\n      },\r\n      team: {\r\n        id: null,\r\n      },\r\n      nivel: {\r\n        id: 1,\r\n      },\r\n      birthDate: null,\r\n      registeredAt: null,\r\n      address: \"\",\r\n      cmp: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      status: true,\r\n    },\r\n    validationSchema,\r\n    // onOpen :() => {\r\n    //   console.log(\"Opening...\")\r\n    // },\r\n    onSubmit: (value) => {      \r\n      console.log(value);\r\n      \r\n      if(value.action==\"new\" || editar == false)\r\n      { createDoctor(value).then((resp) => {\r\n          // console.log(resp);\r\n          listar();\r\n          setVisibleNewForm(false);\r\n          openNotification(\"Guardado Correctamente\", \"\", \"topRight\");\r\n          formik.resetForm();\r\n        }).catch(function (error) {\r\n          if (error.response) \r\n          {\r\n            openErrorNotification(error.response.data.message, \"\", \"topRight\");            \r\n          }\r\n        });   \r\n      } \r\n      else if(value.action==\"update\" || editar == true)\r\n      { delete value.action;\r\n        // console.log(value);\r\n        updateDoctor(value).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisibleUpdateForm(false);\r\n          openNotification(\"Actualizado Correctamente\", \"\", \"topRight\");\r\n          formik.resetForm();\r\n        }).catch(function (error) {\r\n          if (error.response) \r\n          {\r\n            openErrorNotification(error.response.data.message, \"\", \"topRight\");            \r\n          }\r\n        });\r\n      }      \r\n    },\r\n  });\r\n\r\n  \r\n  function upgradeDoctors(){\r\n    upgradeDoctorLevel().then( (resp) => {console.log(resp); listar();} )\r\n                        .catch((error) => { openErrorNotification(\"Error al actualizar el nivel de los médicos.\", \"\", \"topRight\"); });\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 50,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"N° Documento\",\r\n      dataIndex: \"document\",\r\n      key: \"document\",\r\n      width: 110,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Apellidos\",\r\n      dataIndex: \"lastName\",\r\n      key: \"lastName\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombres\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Universidad\",\r\n      dataIndex: \"schoolName\",\r\n      key: \"schoolName\",\r\n      width: 108,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Especialidad\",\r\n      dataIndex: \"specialtyName\",\r\n      key: \"specialtyName\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Plaza\",\r\n      dataIndex: \"plazaName\",\r\n      key: \"plazaName\",\r\n      width: 80,\r\n      align: \"center\",\r\n    },\r\n    // {\r\n    //   title: \"Grupo\",\r\n    //   dataIndex: \"teamName\",\r\n    //   key: \"teamName\",\r\n    //   width: 80,\r\n    //   align: \"center\",\r\n    // },\r\n    {\r\n      title: \"Nivel\",\r\n      dataIndex: \"nivelName\",\r\n      key: \"nivelName\",\r\n      width: 70,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Sede\",\r\n      dataIndex: \"campusName\",\r\n      key: \"campusName\",\r\n      width: 78,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Fecha de Nacimiento\",\r\n      dataIndex: \"birthDate\",\r\n      key: \"birthDate\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Domicilio\",\r\n      dataIndex: \"address\",\r\n      key: \"address\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"CMP\",\r\n      dataIndex: \"cmp\",\r\n      key: \"cmp\",\r\n      width: 70,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"email\",\r\n      key: \"email\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"N° Celular\",\r\n      dataIndex: \"phone\",\r\n      key: \"phone\",\r\n      width: 100,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      width: 90,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.status ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.status);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (\r\n        <Button type=\"link\" size=\"small\" onClick={() => {showUpdateForm(record);}}>\r\n          <EditOutlined />\r\n        </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const keyUpTable = (value) => {\r\n    setFilterTable(\r\n      dataSource.filter((o) =>\r\n        Object.keys(o).some((k) =>\r\n          String(o[k]).toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCloseDrawerNewForm = (e) => {    \r\n    setVisibleNewForm(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const handleCloseDrawerUpdateForm = (e) => {    \r\n    setVisibleUpdateForm(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const showUpdateForm = (doctor) => {\r\n    setDataDoctorToForm(doctor);\r\n    setVisibleUpdateForm(true);\r\n  };\r\n\r\n  const dateFormatList = [\"DD/MM/YYYY\", \"YYYY/MM/DD\"];\r\n\r\n  function setDataDoctorToForm(doctor)\r\n  { formik.initialValues.action = \"update\";\r\n    formik.initialValues.id = doctor.id;\r\n    formik.initialValues.document = doctor.document == null ? \"\" : doctor.document;\r\n    formik.initialValues.paternalSurname = doctor.paternalSurname == null ? \"\" : doctor.paternalSurname;\r\n    formik.initialValues.maternalSurname = doctor.maternalSurname == null ? \"\" : doctor.maternalSurname;\r\n    formik.initialValues.name = doctor.name == null ? \"\" : doctor.name;\r\n    formik.initialValues.schoolAgreement.id = doctor.schoolAgreement == null ? 1 : doctor.schoolAgreement.id;\r\n    formik.initialValues.specialty.id = doctor.specialty == null ? 1 : doctor.specialty.id;\r\n    formik.initialValues.plaza.id = doctor.plaza == null ? 1 : doctor.plaza.id;\r\n    formik.initialValues.campus.id = doctor.campus == null ? 1 : doctor.campus.id;\r\n    formik.initialValues.plazaName = doctor.campus == null ? \"\" : doctor.campus.plazaName;\r\n    \r\n    formik.initialValues.nivel.id = doctor.nivel == null ? 1 : doctor.nivel.id;\r\n    formik.initialValues.birthDate = doctor.birthDate == null ? moment() : moment(doctor.birthDate, dateFormatList);\r\n    formik.initialValues.registeredAt = doctor.registeredAt == null ? moment() : moment(doctor.registeredAt, dateFormatList);\r\n    formik.initialValues.address = doctor.address == null ? \"\" :doctor.address;\r\n    formik.initialValues.cmp = doctor.cmp == null ? \"\" : doctor.cmp;\r\n    formik.initialValues.email = doctor.email == null ? \"\" : doctor.email;\r\n    formik.initialValues.phone = doctor.phone == null ? \"\" : doctor.phone;\r\n    formik.initialValues.status = doctor.status;\r\n\r\n    setEditar(true);\r\n    //console.log(moment(doctor.birthDate).format(\"DD/MM/YYYY\"));\r\n  }\r\n\r\n  function cleanDataDoctorToForm()\r\n  { formik.initialValues.action = 'new';\r\n    formik.initialValues.id = null;\r\n    formik.initialValues.document = '';\r\n    formik.initialValues.paternalSurname = '';\r\n    formik.initialValues.maternalSurname = '';\r\n    formik.initialValues.name = '';\r\n    formik.initialValues.schoolAgreement.id = null;\r\n    formik.initialValues.specialty.id = null;\r\n    formik.initialValues.plaza.id = null;\r\n    formik.initialValues.campus.id = null;\r\n    formik.initialValues.plazaName = '';\r\n    \r\n    formik.initialValues.nivel.id = 1;\r\n    formik.initialValues.birthDate = moment();\r\n    formik.initialValues.registeredAt = moment();\r\n    formik.initialValues.address = '';\r\n    formik.initialValues.cmp = '';\r\n    formik.initialValues.email = '';\r\n    formik.initialValues.phone = '';\r\n    formik.initialValues.status = true;\r\n\r\n    setEditar(false);\r\n    //console.log(moment(doctor.birthDate).format(\"DD/MM/YYYY\"));\r\n  }\r\n\r\n  function disabledDate(current) {\r\n    return current && current > moment().startOf(\"day\");\r\n  }\r\n\r\n  const showModalImport = () => {\r\n    console.log(\"Modal\", isImportDataModalVisible);\r\n    setIsModalImportDataVisible(true);\r\n  };\r\n\r\n  const handleModalImportOk = () => {\r\n    setIsModalImportDataVisible(false);\r\n  };\r\n\r\n  const handleCancelModalImport = () => {\r\n    setIsModalImportDataVisible(false);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    setLoading(false);\r\n    listar();\r\n    getSchoolsAgreements().then(setSchoolsAgreements);\r\n    getSpecialties().then(setSpecialties);\r\n    getPlazas().then(setPlazas);\r\n    getCampus().then(setCampus);\r\n    getNiveles().then(setNiveles);\r\n    getTeams().then(setTeams);\r\n  }, []);\r\n\r\n  const props = {\r\n    name: 'file',\r\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\r\n    headers: {\r\n      authorization: 'authorization-text',\r\n    },\r\n    onChange(info) {\r\n      if (info.file.status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n      if (info.file.status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully`);\r\n      } else if (info.file.status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n  };\r\n\r\n  const renderFile = (fileObj) => {\r\n      //just pass the fileObj as parameter\r\n      ExcelRenderer(fileObj, (err, resp) => {\r\n        if(err){\r\n          console.log(err);            \r\n        }\r\n        else{\r\n          setDataLoaded(true);\r\n          setCols(resp.cols);\r\n          setRows(resp.rows);\r\n          // this.setState({\r\n          //   dataLoaded: true,\r\n          //   cols: resp.cols,\r\n          //   rows: resp.rows\r\n          // });\r\n        }\r\n      }); \r\n  }\r\n\r\n  const fileHandler = (event) => {    \r\n      if(event.fileList.length){\r\n      let fileObj = event.fileList[0];\r\n      let fileName = fileObj.name;\r\n\r\n      \r\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\r\n      if(fileName.slice(fileName.lastIndexOf('.')+1) === \"xlsx\"){\r\n        setUploadedFileName(fileName);\r\n        setFormInvalid(false);        \r\n        renderFile(fileObj)\r\n      }    \r\n      else{\r\n        setFormInvalid(true);\r\n        setUploadedFileName(\"\");\r\n      }\r\n    }               \r\n  }\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Médico</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <div>\r\n          <Button type=\"primary\" size=\"large\" onClick={() => { cleanDataDoctorToForm({}); setVisibleNewForm(true);}} style={{marginRight:'10px'}}>\r\n            <PlusOutlined /> Agregar\r\n          </Button>          \r\n          {/* <Tooltip title=\"Actualizar nivel de Médicos\">\r\n            <Button type=\"primary\" size=\"large\" icon={<ClockCircleOutlined />} onClick={() => { upgradeDoctors() }}/>\r\n          </Tooltip> */}\r\n          <Button type=\"primary\" onClick={showModalImport} size=\"large\">\r\n          Importar Archivo\r\n        </Button>        \r\n        </div>        \r\n      </header>\r\n      <Modal \r\n        title=\"Importar Excel\" \r\n        visible={isImportDataModalVisible} \r\n        //onC={handleModalImportOk} \r\n        onCancel={handleCancelModalImport}\r\n        //okText=\"Guadar datos\"\r\n        cancelText=\"Cancelar\"\r\n        width={1300}        \r\n        okButtonProps={{ style: { display: 'none' } }}\r\n        >\r\n          <ImportFromExcel\r\n           onImportdata={saveImportedDoctor}\r\n           onListDoctors={listar}\r\n           onVisibleModal={handleCancelModalImport}\r\n           onOpenNotification={openNotification}\r\n          />\r\n      </Modal>\r\n      <div className=\"content\">\r\n        <Input.Search\r\n          className=\"searchInput\"\r\n          placeholder=\"Buscar por nombre...\"\r\n          onKeyUpCapture={(e) => keyUpTable(e.target.value)}\r\n        />\r\n        <Table\r\n          loading={loading}\r\n          dataSource={filterTable === null ? dataSource : filterTable}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 2000 }}\r\n        />\r\n        <Drawer\r\n          title=\"Agregar Médico\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={500}\r\n          onClose={handleCloseDrawerNewForm}\r\n          visible={visibleNewForm}\r\n          id=\"newForm\"\r\n        >\r\n          <Form\r\n            title=\"Universidad\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}            \r\n          >\r\n            <Row gutter={12} style={{display:'none'}}>\r\n              <Col span={12}>\r\n                <Form.Item required>\r\n                  <Input\r\n                    name=\"action\"\r\n                    value={formik.values.action}\r\n                    onChange={formik.handleChange}                    \r\n                  />                  \r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"DNI:\" required>\r\n                  <Input\r\n                    name=\"document\"\r\n                    value={formik.values.document}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.document && formik.touched.document ? (\r\n                    <div className=\"error-field\">{formik.errors.document}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Apellido Paterno:\" required>\r\n                  <Input\r\n                    name=\"paternalSurname\"\r\n                    value={formik.values.paternalSurname}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.paternalSurname &&\r\n                  formik.touched.paternalSurname ? (\r\n                    <div className=\"error-field\">\r\n                      {formik.errors.paternalSurname}\r\n                    </div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Apellido Materno:\" required>\r\n                  <Input\r\n                    name=\"maternalSurname\"\r\n                    value={formik.values.maternalSurname}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.maternalSurname &&\r\n                  formik.touched.maternalSurname ? (\r\n                    <div className=\"error-field\">\r\n                      {formik.errors.maternalSurname}\r\n                    </div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Nombre Completo:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Universidad:\" required>\r\n              <Select\r\n                showSearch\r\n                name=\"schoolAgreement.id\"\r\n                placeholder=\"Seleccione una universidad\"\r\n                optionFilterProp=\"children\"\r\n                style={{ width: \"100%\" }}\r\n                value={formik.values.schoolAgreement.id}\r\n                onChange={(text) =>\r\n                  formik.setFieldValue(\"schoolAgreement.id\", text)\r\n                }\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    .toLowerCase()\r\n                    .indexOf(input.toLowerCase()) >= 0\r\n                }\r\n              >\r\n                {schoolsAgreements.map(({ id, school }) => (\r\n                  <Select.Option key={id} value={id}>\r\n                    {school.name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n              {formik.errors.schoolAgreement &&\r\n              formik.touched.schoolAgreement ? (\r\n                <div className=\"error-field\">\r\n                  {formik.errors.schoolAgreement.id}\r\n                </div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Especialidad:\" required>\r\n              <Select\r\n                showSearch\r\n                name=\"specialty.id\"\r\n                placeholder=\"Seleccione una especialidad\"\r\n                optionFilterProp=\"children\"\r\n                style={{ width: \"100%\" }}\r\n                value={formik.values.specialty.id}\r\n                onChange={(text) => formik.setFieldValue(\"specialty.id\", text)}\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    .toLowerCase()\r\n                    .indexOf(input.toLowerCase()) >= 0\r\n                }\r\n              >\r\n                {specialties.map((data) => (\r\n                  <Select.Option key={data.id} value={data.id}>\r\n                    {data.name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n              {formik.errors.specialty && formik.touched.specialty ? (\r\n                <div className=\"error-field\">{formik.errors.specialty.id}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Plaza:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"plaza.id\"\r\n                    placeholder=\"Seleccione una plaza\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.plaza.id}\r\n                    onChange={(text) => formik.setFieldValue(\"plaza.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {plazas.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.plaza && formik.touched.plaza ? (\r\n                    <div className=\"error-field\">{formik.errors.plaza.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Sede:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"campus.id\"\r\n                    placeholder=\"Seleccione una sede\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.campus.id}\r\n                    onChange={(text) => formik.setFieldValue(\"campus.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {campus.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.campus && formik.touched.campus ? (\r\n                    <div className=\"error-field\">{formik.errors.campus.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Grupo:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"grupo.id\"\r\n                    placeholder=\"Seleccione un grupo\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.team.id}\r\n                    onChange={(text) => formik.setFieldValue(\"team.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {teams.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.team && formik.touched.team ? (\r\n                    <div className=\"error-field\">{formik.errors.team.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}> */}\r\n                <Form.Item label=\"Nivel:\">\r\n                  <Select\r\n                    disabled\r\n                    showSearch\r\n                    name=\"campus.id\"\r\n                    placeholder=\"Seleccione un nivel\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.nivel.id}\r\n                    onChange={(text) => formik.setFieldValue(\"nivel.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {niveles.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                </Form.Item>\r\n              {/* </Col>\r\n            </Row> */}                     \r\n            <Form.Item label=\"Fecha de Ingreso:\">\r\n              <DatePicker\r\n                style={{ width: \"100%\" }}\r\n                name=\"birthDate\"\r\n                value={formik.values.registeredAt}\r\n                onChange={(value) =>\r\n                  formik.setFieldValue(\"registeredAt\", value)\r\n                }\r\n                disabledDate={disabledDate}\r\n                format={dateFormatList}\r\n              />\r\n              {formik.errors.registeredAt && formik.touched.registeredAt ? (\r\n                <div className=\"error-field\">{formik.errors.registeredAt}</div>\r\n              ) : null}\r\n            </Form.Item>                          \r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Fecha de Nacimiento:\">\r\n                  <DatePicker\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"birthDate\"\r\n                    value={formik.values.birthDate}\r\n                    onChange={(value) =>\r\n                      formik.setFieldValue(\"birthDate\", value)\r\n                    }\r\n                    disabledDate={disabledDate}\r\n                    format={dateFormatList}\r\n                  />\r\n                  {formik.errors.birthDate && formik.touched.birthDate ? (\r\n                    <div className=\"error-field\">{formik.errors.birthDate}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"CMP:\" required>\r\n                  <Input\r\n                    name=\"cmp\"\r\n                    value={formik.values.cmp}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.cmp && formik.touched.cmp ? (\r\n                    <div className=\"error-field\">{formik.errors.cmp}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Domicilio:\">\r\n              <Input\r\n                name=\"address\"\r\n                value={formik.values.address}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.address && formik.touched.address ? (\r\n                <div className=\"error-field\">{formik.errors.address}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Correo:\" required>\r\n                  <Input\r\n                    name=\"email\"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.email && formik.touched.email ? (\r\n                    <div className=\"error-field\">{formik.errors.email}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"N°Celular:\" required>\r\n                  <Input\r\n                    name=\"phone\"\r\n                    value={formik.values.phone}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.phone && formik.touched.phone ? (\r\n                    <div className=\"error-field\">{formik.errors.phone}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" block>\r\n              Registrar\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n\r\n        <Drawer\r\n          title=\"Actualizar Médico\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={500}\r\n          onClose={handleCloseDrawerUpdateForm}\r\n          visible={visibleUpdateForm}\r\n          id=\"updateForm\"\r\n        >\r\n          <Form\r\n            title=\"Medico\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >            \r\n            <Row gutter={12} style={{display:'none'}}>\r\n              <Col span={12}>\r\n                <Form.Item required>\r\n                  <Input\r\n                    name=\"action\"\r\n                    value={formik.values.action}\r\n                    onChange={formik.handleChange}                    \r\n                  />                  \r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"ID:\" required >\r\n                  <Input\r\n                    disabled\r\n                    name=\"id\"\r\n                    value={formik.values.id}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.document && formik.touched.document ? (\r\n                    <div className=\"error-field\">{formik.errors.document}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"DNI:\" required>\r\n                  <Input\r\n                    name=\"document\"\r\n                    value={formik.values.document}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.document && formik.touched.document ? (\r\n                    <div className=\"error-field\">{formik.errors.document}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Apellido Paterno:\" required>\r\n                  <Input\r\n                    name=\"paternalSurname\"\r\n                    value={formik.values.paternalSurname}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.paternalSurname &&\r\n                  formik.touched.paternalSurname ? (\r\n                    <div className=\"error-field\">\r\n                      {formik.errors.paternalSurname}\r\n                    </div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Apellido Materno:\" required>\r\n                  <Input\r\n                    name=\"maternalSurname\"\r\n                    value={formik.values.maternalSurname}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.maternalSurname &&\r\n                  formik.touched.maternalSurname ? (\r\n                    <div className=\"error-field\">\r\n                      {formik.errors.maternalSurname}\r\n                    </div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Nombre Completo:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Universidad:\" required>\r\n              <Select\r\n                showSearch\r\n                name=\"schoolAgreement.id\"\r\n                placeholder=\"Seleccione una universidad\"\r\n                optionFilterProp=\"children\"\r\n                style={{ width: \"100%\" }}\r\n                value={formik.values.schoolAgreement.id}\r\n                onChange={(text) =>\r\n                  formik.setFieldValue(\"schoolAgreement.id\", text)\r\n                }\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    .toLowerCase()\r\n                    .indexOf(input.toLowerCase()) >= 0\r\n                }\r\n              >\r\n                {schoolsAgreements.map(({ id, school }) => (\r\n                  <Select.Option key={id} value={id}>\r\n                    {school.name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n              {formik.errors.schoolAgreement &&\r\n              formik.touched.schoolAgreement ? (\r\n                <div className=\"error-field\">\r\n                  {formik.errors.schoolAgreement.id}\r\n                </div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Especialidad:\" required>\r\n              <Select\r\n                showSearch\r\n                name=\"specialty.id\"\r\n                placeholder=\"Seleccione una especialidad\"\r\n                optionFilterProp=\"children\"\r\n                style={{ width: \"100%\" }}\r\n                value={formik.values.specialty.id}\r\n                onChange={(text) => formik.setFieldValue(\"specialty.id\", text)}\r\n                filterOption={(input, option) =>\r\n                  option.props.children\r\n                    .toLowerCase()\r\n                    .indexOf(input.toLowerCase()) >= 0\r\n                }\r\n              >\r\n                {specialties.map((data) => (\r\n                  <Select.Option key={data.id} value={data.id}>\r\n                    {data.name}\r\n                  </Select.Option>\r\n                ))}\r\n              </Select>\r\n              {formik.errors.specialty && formik.touched.specialty ? (\r\n                <div className=\"error-field\">{formik.errors.specialty.id}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Plaza:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"plaza.id\"\r\n                    placeholder=\"Seleccione una plaza\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.plaza.id}\r\n                    onChange={(text) => formik.setFieldValue(\"plaza.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {plazas.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.plaza && formik.touched.plaza ? (\r\n                    <div className=\"error-field\">{formik.errors.plaza.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Sede:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"campus.id\"\r\n                    placeholder=\"Seleccione una sede\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.campus.id}\r\n                    onChange={(text) => formik.setFieldValue(\"campus.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {campus.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.campus && formik.touched.campus ? (\r\n                    <div className=\"error-field\">{formik.errors.campus.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Grupo:\" required>\r\n                  <Select\r\n                    showSearch\r\n                    name=\"grupo.id\"\r\n                    placeholder=\"Seleccione un grupo\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.team.id}\r\n                    onChange={(text) => formik.setFieldValue(\"team.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {teams.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                  {formik.errors.team && formik.touched.team ? (\r\n                    <div className=\"error-field\">{formik.errors.team.id}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}> */}\r\n                <Form.Item label=\"Nivel:\">\r\n                  <Select\r\n                    disabled\r\n                    showSearch\r\n                    name=\"campus.id\"\r\n                    placeholder=\"Seleccione un nivel\"\r\n                    optionFilterProp=\"children\"\r\n                    style={{ width: \"100%\" }}\r\n                    value={formik.values.nivel.id}\r\n                    onChange={(text) => formik.setFieldValue(\"nivel.id\", text)}\r\n                    filterOption={(input, option) =>\r\n                      option.props.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {niveles.map((data) => (\r\n                      <Select.Option key={data.id} value={data.id}>\r\n                        {data.name}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                </Form.Item>\r\n              {/* </Col>\r\n            </Row> */}            \r\n            <Form.Item label=\"Fecha de Ingreso:\">\r\n              <DatePicker\r\n                style={{ width: \"100%\" }}\r\n                name=\"birthDate\"\r\n                value={formik.values.registeredAt}\r\n                onChange={(value) =>\r\n                  formik.setFieldValue(\"registeredAt\", value)\r\n                }\r\n                disabledDate={disabledDate}\r\n                format={dateFormatList}\r\n              />\r\n              {formik.errors.registeredAt && formik.touched.registeredAt ? (\r\n                <div className=\"error-field\">{formik.errors.registeredAt}</div>\r\n              ) : null}\r\n            </Form.Item>              \r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Fecha de Nacimiento:\">\r\n                  <DatePicker\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"birthDate\"\r\n                    value={formik.values.birthDate}\r\n                    onChange={(value) =>\r\n                      formik.setFieldValue(\"birthDate\", value)\r\n                    }\r\n                    disabledDate={disabledDate}\r\n                    format={dateFormatList}\r\n                  />\r\n                  {formik.errors.birthDate && formik.touched.birthDate ? (\r\n                    <div className=\"error-field\">{formik.errors.birthDate}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"CMP:\" required>\r\n                  <Input\r\n                    name=\"cmp\"\r\n                    value={formik.values.cmp}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.cmp && formik.touched.cmp ? (\r\n                    <div className=\"error-field\">{formik.errors.cmp}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Domicilio:\">\r\n              <Input\r\n                name=\"address\"\r\n                value={formik.values.address}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.address && formik.touched.address ? (\r\n                <div className=\"error-field\">{formik.errors.address}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Row gutter={12}>\r\n              <Col span={12}>\r\n                <Form.Item label=\"Correo:\" required>\r\n                  <Input\r\n                    name=\"email\"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.email && formik.touched.email ? (\r\n                    <div className=\"error-field\">{formik.errors.email}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={12}>\r\n                <Form.Item label=\"N°Celular:\" required>\r\n                  <Input\r\n                    name=\"phone\"\r\n                    value={formik.values.phone}\r\n                    onChange={formik.handleChange}\r\n                  />\r\n                  {formik.errors.phone && formik.touched.phone ? (\r\n                    <div className=\"error-field\">{formik.errors.phone}</div>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" block>\r\n              Actualizar\r\n            </Button>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Servicio\\index.js",["287"],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\EspecialidadServicio\\index.js",["288","289"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  notification,\r\n  Tooltip,\r\n  Select,\r\n} from \"antd\";\r\nimport { EditOutlined, PlusCircleOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { getServicesBySpeciality, addServiceToSpeciality, removeServiceToSpeciality, getActiveServices } from \"../../../services/ServicioService\";\r\nimport { getSpecialtiesDto } from \"../../../services/SpecialtyService\";\r\n\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"../Mantenimiento.css\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nconst openErrorNotification = (msg, description, placement) => {\r\n    notification.error({\r\n      message: msg,\r\n      description: description,\r\n      placement,\r\n    });\r\n  };\r\n\r\nexport const EspecialidadServicio = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const [editar, setEditar] = useState(false);\r\n  const [filterTable, setFilterTable] = useState(null);  \r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [filterServiceTable, setFilterServiceTable] = useState(null);  \r\n  const [dataServiceSource, setDataServiceSource] = useState([]);\r\n  const [services, setServices] = useState([]);\r\n  const [addNewService, setAddNewService] = useState(false);\r\n  const [delSpeciliaty, setDelSpeciliaty] = useState(null);\r\n\r\n  const listar = () => {\r\n\r\n    getSpecialtiesDto().then((resp) => {\r\n        resp.forEach((data) => {\r\n          data.key = data.id;\r\n        });\r\n        console.log(resp);\r\n        setDataSource(resp);\r\n    });\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    servicioId: Yup.string()\r\n        .required(\"Seleccione un Servicio\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        servicioId: null,\r\n        specialityId: null,\r\n    },\r\n    validationSchema,\r\n    onSubmit: (value) => {\r\n      console.log(value);    \r\n      addServiceToSpeciality(value).then((resp) => {\r\n        console.log(resp);\r\n        //listar();\r\n        //setVisible(false);\r\n        editSpeciality(value.specialityId);\r\n        openNotification(\"Servicio agregado correctamente\", \"\", \"topRight\");\r\n      });\r\n      \r\n      formik.resetForm();\r\n      setAddNewService(false)\r\n     },\r\n  });\r\n\r\n  const editSpeciality = (specialityId) => {\r\n    setEditar(true);\r\n    setDelSpeciliaty(specialityId);\r\n    // console.log(specialityId);\r\n    getServicesBySpeciality(specialityId).then((resp) => {\r\n        getActiveServices(specialityId).then(setServices).catch(err => console.log(err));\r\n        resp.forEach((data) => {\r\n            data.key = data.id;\r\n        });\r\n        console.log(resp);\r\n        setDataServiceSource(resp);\r\n        setVisible(true);\r\n    }).catch(error => console.log(error));\r\n  };\r\n\r\n  const removeSpeciality = (serviceId) => {\r\n    \r\n    console.log(serviceId);\r\n    \r\n    removeServiceToSpeciality(delSpeciliaty, serviceId)\r\n    .then( (data) => { \r\n        openNotification(\"Servicio eliminado correctamente\", \"\", \"topRight\"); \r\n        editSpeciality(delSpeciliaty);\r\n    }).catch( (error) => {\r\n        openErrorNotification(\"Error al eliminar el servicio.\", \"\", \"topRight\"); console.log(error);\r\n    } )\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 80,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"state\",\r\n      key: \"state\",\r\n      width: 120,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.state ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.state);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (        \r\n         <Button type=\"primary\" size=\"large\" onClick={() => \r\n          {             \r\n            formik.values.name = record.name;\r\n            formik.values.specialityId = record.id; \r\n            editSpeciality(record.id);           \r\n          }\r\n         \r\n         }>\r\n        <EditOutlined />\r\n       </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const servicesColumns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 80,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"state\",\r\n      key: \"state\",\r\n      width: 120,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.state ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.state);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (        \r\n        <Button type=\"danger\" size=\"large\" onClick={() => removeSpeciality(record.id)}>\r\n        <Tooltip title=\"Quitar servicio\">\r\n            <DeleteOutlined />\r\n        </Tooltip>        \r\n       </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const keyUpTable = (value) => {\r\n    setFilterTable(\r\n      dataSource.filter((o) =>\r\n        Object.keys(o).some((k) =>\r\n          String(o[k]).toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCloseDrawer = () => {\r\n    setVisible(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    listar();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Asignar Servicios a Especialidad</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n      </header>\r\n      <div className=\"content\">\r\n        <Input.Search\r\n          className=\"searchInput\"\r\n          placeholder=\"Buscar por ...\"\r\n          onKeyUpCapture={(e) => keyUpTable(e.target.value)}\r\n        />\r\n        <Table\r\n          loading={loading}\r\n          dataSource={filterTable === null ? dataSource : filterTable}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 800 }}\r\n        />\r\n        <Drawer\r\n          title={\"Listado de Servicios por Especialidad\"}\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={900}\r\n          onClose={handleCloseDrawer}\r\n          visible={visible}\r\n        >\r\n          <Form\r\n            title=\"Servicio\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Form.Item label=\"Nombre de Servicio:\" >\r\n              <Input\r\n                value={formik.values.name}\r\n                disabled={true}  \r\n                style={{width: \"calc(100% - 32px)\"}}\r\n              />              \r\n                <Tooltip placement=\"topLeft\" title=\"Añadir un servicio\">\r\n                    <Button type=\"link\" size=\"small\">\r\n                        <PlusCircleOutlined  onClick={() => setAddNewService(!addNewService)}/>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Input\r\n                    name=\"specialityId\"\r\n                    value={formik.values.specialityId}\r\n                    disabled={true}  \r\n                    style={{display: \"none\"}}\r\n                />    \r\n            </Form.Item>   \r\n            { addNewService ? (\r\n            <div>                       \r\n                <Form.Item label=\"Servicio:\" required>\r\n                    <Select\r\n                        showSearch\r\n                        name=\"servicioId\"\r\n                        placeholder=\"Seleccione un Servicio\"\r\n                        optionFilterProp=\"children\"\r\n                        style={{ width: \"100%\" }}\r\n                        value={formik.values.servicioId}\r\n                        onChange={(text) => formik.setFieldValue(\"servicioId\", text)}\r\n                        filterOption={(input, option) =>\r\n                        option.props.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                    >\r\n                        {services.map((data) => (\r\n                        <Select.Option key={data.id} value={data.id}>\r\n                            {data.name}\r\n                        </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                    {formik.errors.servicioId && formik.touched.servicioId ? (\r\n                        <div className=\"error-field\">{formik.errors.servicioId}</div>\r\n                    ) : null}                    \r\n                </Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" block>\r\n                    Agregar Servicio\r\n                </Button>\r\n            </div> \r\n            )\r\n             : (<br/>) }\r\n            <br/>\r\n            <Form.Item>\r\n                <Table\r\n                    loading={loading}\r\n                    dataSource={filterServiceTable === null ? dataServiceSource : filterServiceTable}\r\n                    columns={servicesColumns}\r\n                    pagination={{ pageSize: 5 }}\r\n                    scroll={{ x: 800 }}\r\n                />\r\n            </Form.Item>        \r\n          </Form>          \r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\GrupoMant\\index.js",["290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Breadcrumb, Modal, Select ,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  Radio,\r\n  notification,\r\n  AutoComplete,\r\n} from \"antd\";\r\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { createSchool, getSchools, actualizarSchool } from \"../../../services/SchoolService\";\r\nimport { getDoctors, getDoctorsByTeam, getDoctorsByTeamTipo, getTeamIdCategoriaTodos, getFindAllByTeamIdGrupo, findAllTipos, \r\n  createDoctor, createDoctorGrupo, borrarDoctorGrupo } from \"../../../services/DoctorService\";\r\n\r\n  import { getTeams, createTeams, actualizarTeams, guardar, registrar } from \"../../../services/TeamService\";\r\n\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"../Mantenimiento.css\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nexport const GrupoMant = () => {\r\n  const [loading, setLoading] = useState(false);  \r\n  const [visible, setVisible] = useState(false);\r\n  const [editar, setEditar] = useState(false);\r\n  const [placeCategoria, setPlaceCategoria] = useState('Seleccione una Categoría');\r\n  const [categoriaslst, setCategoriaslst] = useState([]);\r\n  const [filterTable, setFilterTable] = useState(null);  \r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [categoriaId, setCategoria] = useState(null);  \r\n  const [idTeam, setIdTeam] = useState(null);\r\n\r\n  const listar = () => {\r\n    getTeams().then((resp) => {\r\n      resp.forEach((data) => {\r\n          data.key = data.id;         \r\n          if(data.tipo != null) {\r\n            if(data.tipo.id != null){\r\n              data.tipoId = data.tipo.id;\r\n            }\r\n            if(data.tipo.name != null){\r\n              data.tipoName = data.tipo.name;\r\n            }\r\n          }                    \r\n      });\r\n      setDataSource(resp);\r\n    });\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n     \r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      shortName: \"\",\r\n      status: true,\r\n    },\r\n    validationSchema,\r\n    onSubmit: (value) => {\r\n      value.tipoId = categoriaId;\r\n\r\n\r\n      if(value.name == null){\r\n        openNotification(\"Debe ingresar un nombre\", \"\", \"topLeft\");\r\n        return;\r\n      }\r\n\r\n      if(value.name.trim() == ''){\r\n        openNotification(\"Debe ingresar un nombre\", \"\", \"topLeft\");\r\n        return;\r\n      }\r\n\r\n      if(value.tipoId == null){\r\n        openNotification(\"Debe seleccionar una Categoría\", \"\", \"topLeft\");\r\n        return;\r\n      }\r\n\r\n      console.log(value);\r\n      if(editar){\r\n        guardar(value.id, value.name, value.tipoId).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisible(false);\r\n          openNotification(\"Actualizado Correctamente\", \"\", \"topRight\");\r\n        });\r\n      }else{\r\n        registrar(value.name, value.tipoId).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisible(false);\r\n          openNotification(\"Guardado Correctamente\", \"\", \"topRight\");\r\n        });\r\n      }\r\n\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 50,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"# Categoría\",\r\n      dataIndex: \"tipoId\",\r\n      key: \"tipoId\",\r\n      width: 170,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Categoría\",\r\n      dataIndex: \"tipoName\",\r\n      key: \"tipoName\",\r\n      width: 170,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (\r\n        // <Button type=\"link\" size=\"small\">\r\n        //   <EditOutlined />\r\n        // </Button>\r\n         <Button type=\"primary\" size=\"large\" onClick={() => \r\n          {             \r\n            formik.values.name = record.name;\r\n            formik.values.tipoId = record.tipoId;\r\n            formik.values.tipoName = record.tipoName;\r\n            formik.values.id = record.id;            \r\n\r\n            setPlaceCategoria(record.tipoName);\r\n            setCategoria(record.tipoId);\r\n\r\n            setEditar(true);\r\n            setVisible(true);          \r\n          }\r\n         \r\n         }>\r\n        <EditOutlined />\r\n       </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const keyUpTable = (value) => {\r\n    setFilterTable(\r\n      dataSource.filter((o) =>\r\n        Object.keys(o).some((k) =>\r\n          String(o[k]).toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCloseDrawer = () => {\r\n    setVisible(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  const hanldeSelectCategoria = (e) => {\r\n    console.log(e);\r\n    if(e == 1){\r\n      setPlaceCategoria('Medicina');\r\n      setCategoria(e);\r\n    }\r\n    if(e == 2){\r\n      setPlaceCategoria('Cirugía');\r\n      setCategoria(e);      \r\n    }\r\n};\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    setIdTeam(null);\r\n\r\n    findAllTipos().then( x =>\r\n      {  \r\n        setCategoriaslst(x);\r\n      }\r\n      );\r\n\r\n    listar();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Grupo</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <Button type=\"primary\" size=\"large\" onClick={() =>           \r\n          {\r\n            formik.values.name = null;\r\n            formik.values.tipoId = null;\r\n            formik.values.tipoName = null;\r\n            formik.values.id = null;\r\n            \r\n            setCategoria(null);\r\n            setPlaceCategoria('Seleccione');\r\n            setEditar(false);\r\n            setVisible(true)\r\n          }\r\n          }>\r\n          <PlusOutlined /> Agregar\r\n        </Button>\r\n      </header>\r\n      <div className=\"content\">\r\n        <Input.Search\r\n          className=\"searchInput\"\r\n          placeholder=\"Buscar por ...\"\r\n          onKeyUpCapture={(e) => keyUpTable(e.target.value)}\r\n        />\r\n        <Table\r\n          loading={loading}\r\n          dataSource={filterTable === null ? dataSource : filterTable}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 800 }}\r\n        />\r\n        <Drawer\r\n          title=\"Agregar Grupo\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={400}\r\n          onClose={handleCloseDrawer}\r\n          visible={visible}\r\n        >\r\n          <Form\r\n            title=\"Grupo\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Form.Item label=\"Nombre:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            {/* TIPOS */}\r\n\r\n            <Form.Item label=\"Categoría\">\r\n            <Select\r\n              showSearch\r\n              name=\"cateogria\"\r\n              placeholder= {placeCategoria}\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\"}}\r\n              value={formik.values.categoria}\r\n              onChange={hanldeSelectCategoria}\r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n                {categoriaslst.map((data) => (\r\n                <Select.Option key={data.name} value={data.id}>\r\n                {data.name}\r\n                </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </Form.Item>\r\n    \r\n            \r\n            {/* <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item> */}\r\n\r\n              {\r\n                editar? (\r\n                <Button type=\"primary\" htmlType=\"submit\" block> Actualizar</Button>\r\n                ) : <Button type=\"primary\" htmlType=\"submit\" block> Registrar</Button>\r\n              }\r\n\r\n            \r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Layout\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Especialidad\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Proceso\\AsignarGrupo\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Servicio\\RotacionServiciosPorPeriodo\\index.js",["311","312","313","314","315","316","317"],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Servicio\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Reporte\\Medico\\index.js",["318"],"import React, { useEffect, useState } from \"react\";\r\nimport { Breadcrumb, Button, Table, Tag } from \"antd\";\r\nimport { EditOutlined, FilePdfTwoTone } from \"@ant-design/icons\";\r\nimport { getDoctors, viewPdfDoctor } from \"../../../services/DoctorService\";\r\n\r\nimport \"../../Mantenimiento/Mantenimiento.css\";\r\n\r\nexport const MedicoReporte = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataSource, setDataSource] = useState([]);\r\n\r\n  const listar = () => {\r\n    getDoctors().then((resp) => {\r\n      resp.forEach((data) => {\r\n        data.key = data.id;\r\n        data.schoolName = data.schoolAgreement.school.shortName;\r\n        data.specialtyName = data.specialty.name;\r\n        data.plazaName = data.plaza.name;\r\n        data.campusName = data.campus.name;\r\n        data.lastName = data.paternalSurname + \" \" + data.maternalSurname;\r\n      });\r\n      setDataSource(resp);\r\n      console.log(resp);\r\n    });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 50,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"N° Documento\",\r\n      dataIndex: \"document\",\r\n      key: \"document\",\r\n      width: 110,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Apellidos\",\r\n      dataIndex: \"lastName\",\r\n      key: \"lastName\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombres\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Universidad\",\r\n      dataIndex: \"schoolName\",\r\n      key: \"schoolName\",\r\n      width: 108,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Especialidad\",\r\n      dataIndex: \"specialtyName\",\r\n      key: \"specialtyName\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Plaza\",\r\n      dataIndex: \"plazaName\",\r\n      key: \"plazaName\",\r\n      width: 80,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Sede\",\r\n      dataIndex: \"campusName\",\r\n      key: \"campusName\",\r\n      width: 78,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Fecha de Nacimiento\",\r\n      dataIndex: \"birthDate\",\r\n      key: \"birthDate\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Domicilio\",\r\n      dataIndex: \"address\",\r\n      key: \"address\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"CMP\",\r\n      dataIndex: \"cmp\",\r\n      key: \"cmp\",\r\n      width: 70,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"email\",\r\n      key: \"email\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"N° Celular\",\r\n      dataIndex: \"phone\",\r\n      key: \"phone\",\r\n      width: 100,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      width: 90,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.status ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.status);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    // {\r\n    //   title: \"Acciones\",\r\n    //   key: \"action\",\r\n    //   fixed: \"right\",\r\n    //   width: 100,\r\n    //   align: \"center\",\r\n    //   render: (record) => (\r\n    //     <Button type=\"link\" size=\"small\">\r\n    //       <EditOutlined />\r\n    //     </Button>\r\n    //   ),\r\n    // },\r\n  ];\r\n\r\n  const exportToPdf = () => {\r\n    console.log(\"hello pdf\");\r\n    viewPdfDoctor();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    listar();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Reporte</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Médico</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <Button\r\n          type=\"dashed\"\r\n          color=\"red\"\r\n          size=\"large\"\r\n          danger\r\n          onClick={exportToPdf}\r\n        >\r\n          <FilePdfTwoTone twoToneColor=\"red\" /> Exportar a PDF\r\n        </Button>\r\n      </header>\r\n      <div className=\"content\">\r\n        <Table\r\n          loading={loading}\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 2000 }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Universidad\\index.js",["319"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Button,\r\n  Drawer,\r\n  Input,\r\n  Table,\r\n  Tag,\r\n  Form,\r\n  Radio,\r\n  notification,\r\n} from \"antd\";\r\nimport { EditOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { createSchool, getSchools, actualizarSchool } from \"../../../services/SchoolService\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"../Mantenimiento.css\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nexport const Universidad = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const [editar, setEditar] = useState(false);\r\n  const [filterTable, setFilterTable] = useState(null);  \r\n  const [dataSource, setDataSource] = useState([]);\r\n\r\n  const listar = () => {\r\n    getSchools().then((resp) => {\r\n      resp.forEach((data) => {\r\n        data.key = data.id;\r\n      });\r\n      setDataSource(resp);\r\n    });\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Nombre requerido.\"),\r\n    shortName: Yup.string()\r\n      .trim()\r\n      .matches(/^[ñÑa-zA-Z ]*$/, \"Solo se admiten letras.\")\r\n      .required(\"Nombre Abreviado requerido.\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n      shortName: \"\",\r\n      status: true,\r\n    },\r\n    validationSchema,\r\n    onSubmit: (value) => {\r\n      console.log(value);\r\n      if(editar){\r\n        createSchool(value).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisible(false);\r\n          openNotification(\"Actualizado Correctamente\", \"\", \"topRight\");\r\n        });\r\n      }else{\r\n        createSchool(value).then((resp) => {\r\n          console.log(resp);\r\n          listar();\r\n          setVisible(false);\r\n          openNotification(\"Guardado Correctamente\", \"\", \"topRight\");\r\n        });\r\n      }\r\n\r\n     \r\n      \r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"#\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 50,\r\n      fixed: \"left\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Nombre Abreviado\",\r\n      dataIndex: \"shortName\",\r\n      key: \"shortName\",\r\n      width: 170,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estado\",\r\n      dataIndex: \"status\",\r\n      key: \"status\",\r\n      width: 120,\r\n      align: \"center\",\r\n      render: (val, record) =>\r\n        record.status ? (\r\n          <Tag color=\"green\">ACTIVO</Tag>\r\n        ) : (\r\n          <Tag color=\"red\">INACTIVO</Tag>\r\n        ),\r\n      filters: [\r\n        {\r\n          text: \"ACTIVO\",\r\n          value: true,\r\n        },\r\n        {\r\n          text: \"INACTIVO\",\r\n          value: false,\r\n        },\r\n      ],\r\n      filterMultiple: false,\r\n      onFilter: (value, record) => {\r\n        let status = String(record.status);\r\n        return status.indexOf(value) === 0;\r\n      },\r\n    },\r\n    {\r\n      title: \"Acciones\",\r\n      key: \"action\",\r\n      fixed: \"right\",\r\n      width: 100,\r\n      align: \"center\",\r\n      render: (record) => (\r\n        // <Button type=\"link\" size=\"small\">\r\n        //   <EditOutlined />\r\n        // </Button>\r\n         <Button type=\"primary\" size=\"large\" onClick={() => \r\n          {             \r\n            formik.values.name = record.name;\r\n            formik.values.shortName = record.shortName;\r\n            formik.values.status = record.status;\r\n            formik.values.id = record.id;\r\n            setEditar(true);\r\n            setVisible(true);          \r\n          }\r\n         \r\n         }>\r\n        <EditOutlined />\r\n       </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const keyUpTable = (value) => {\r\n    setFilterTable(\r\n      dataSource.filter((o) =>\r\n        Object.keys(o).some((k) =>\r\n          String(o[k]).toLowerCase().includes(value.toLowerCase())\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleCloseDrawer = () => {\r\n    setVisible(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    listar();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mantenimiento\">\r\n      <header>\r\n        <h2 className=\"title\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>Mantenimiento</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Universidad</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        </h2>\r\n        <Button type=\"primary\" size=\"large\" onClick={() =>           \r\n          {\r\n            formik.values.name = null;\r\n            formik.values.shortName = null;\r\n            formik.values.true = null;\r\n            formik.values.id = null;\r\n            setEditar(false);\r\n            setVisible(true)\r\n          }\r\n          }>\r\n          <PlusOutlined /> Agregar\r\n        </Button>\r\n      </header>\r\n      <div className=\"content\">\r\n        <Input.Search\r\n          className=\"searchInput\"\r\n          placeholder=\"Buscar por ...\"\r\n          onKeyUpCapture={(e) => keyUpTable(e.target.value)}\r\n        />\r\n        <Table\r\n          loading={loading}\r\n          dataSource={filterTable === null ? dataSource : filterTable}\r\n          columns={columns}\r\n          pagination={{ pageSize: 5 }}\r\n          scroll={{ x: 800 }}\r\n        />\r\n        <Drawer\r\n          title=\"Agregar Universidad\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          width={400}\r\n          onClose={handleCloseDrawer}\r\n          visible={visible}\r\n        >\r\n          <Form\r\n            title=\"Universidad\"\r\n            layout=\"vertical\"\r\n            onSubmitCapture={formik.handleSubmit}\r\n          >\r\n            <Form.Item label=\"Nombre:\" required>\r\n              <Input\r\n                name=\"name\"\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.name && formik.touched.name ? (\r\n                <div className=\"error-field\">{formik.errors.name}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Nombre Abreviado:\" required>\r\n              <Input\r\n                name=\"shortName\"\r\n                value={formik.values.shortName}\r\n                onChange={formik.handleChange}\r\n              />\r\n              {formik.errors.shortName && formik.touched.shortName ? (\r\n                <div className=\"error-field\">{formik.errors.shortName}</div>\r\n              ) : null}\r\n            </Form.Item>\r\n            <Form.Item label=\"Estado:\">\r\n              <Radio.Group\r\n                name=\"status\"\r\n                value={formik.values.status}\r\n                onChange={formik.handleChange}\r\n              >\r\n                <Radio.Button value={true}>ACTIVO</Radio.Button>\r\n                <Radio.Button value={false}>INACTIVO</Radio.Button>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n\r\n              {\r\n                editar? (\r\n                <Button type=\"primary\" htmlType=\"submit\" block> Actualizar</Button>\r\n                ) : <Button type=\"primary\" htmlType=\"submit\" block> Registrar</Button>\r\n              }\r\n\r\n            \r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\UserService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Especialidad\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioDelegadoService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioDoctorService.js",["320"],"import clienteAxios from \"../config/clienteAxios\";\r\n\r\nconst getServiciosDoctor = async () => {\r\n  const resp = await clienteAxios.get(\"/servicio-doctor\");\r\n  return resp.data;\r\n};\r\n\r\nconst getServiciosDoctorBySpecialtyId = async (id) => {\r\n  const resp = await clienteAxios.get(`/servicio-doctor/${id}`);\r\n  return resp.data;\r\n};\r\n\r\nconst getServiciosDoctorByServiceId = async (id) => {\r\n  const resp = await clienteAxios.get(`/servicio-doctor/${id}`);\r\n  return resp.data;\r\n};\r\n\r\nconst viewPdfServiciosDoctor = async () => {\r\n  await clienteAxios\r\n    .get(\"/servicio-doctor/pdf\", { responseType: \"blob\" })\r\n    .then((resp) => {\r\n      const file = new Blob([resp.data], { type: \"application/pdf\" });\r\n      const fileURL = URL.createObjectURL(file);\r\n      window.open(fileURL);\r\n    });\r\n};\r\n\r\nconst viewPdfServiciosDoctorFilterSpecialty = async (id) => {\r\n  await clienteAxios\r\n    .get(`/servicio-doctor/pdf/${id}`, { responseType: \"blob\" })\r\n    .then((resp) => {\r\n      const file = new Blob([resp.data], { type: \"application/pdf\" });\r\n      const fileURL = URL.createObjectURL(file);\r\n      window.open(fileURL);\r\n    });\r\n};\r\n\r\nconst getServiciosDoctorByAnioAndServicio = async (idServicio, idAnio) => {\r\n  console.log(idServicio, idAnio);\r\n  const resp = await clienteAxios.get(`/servicio-doctor/report/${idServicio}/${idAnio}`);\r\n  return resp.data;\r\n};\r\n\r\nconst viewPdfServiciosDoctorByAnioAndServicio = async (idAnio, idServicio) => {\r\n  await clienteAxios\r\n    .get(`/servicio-doctor/pdf/medicos-residentes-otras-especialidades-por-periodo/${idServicio}/${idAnio}`, { responseType: \"blob\" })\r\n    .then((resp) => {\r\n      const file = new Blob([resp.data], { type: \"application/pdf\" });\r\n      const fileURL = URL.createObjectURL(file);\r\n      window.open(fileURL);\r\n    });\r\n};\r\n\r\nexport {\r\n  getServiciosDoctor,\r\n  getServiciosDoctorBySpecialtyId,\r\n  viewPdfServiciosDoctor,\r\n  viewPdfServiciosDoctorFilterSpecialty,\r\n  getServiciosDoctorByAnioAndServicio,\r\n  viewPdfServiciosDoctorByAnioAndServicio,\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SchoolAgreementService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\CampusService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\NivelService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\TeamService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\DoctorService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\RoleService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\PlazaService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SchoolService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\AnioAcademicoService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\MesService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\ServicioService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\pages\\Mantenimiento\\Medico\\ImportFromExcel.js",["321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338"],"import React, { Component } from 'react';\r\nimport { Modal, Button } from \"antd\";\r\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\r\nimport {Container, Row, Col, Input, InputGroup, InputGroupAddon, FormGroup, Label, Fade, FormFeedback, Card } from 'reactstrap';\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport './ImportFromExcel.css';\r\n\r\nconst validationDoctorData = Yup.object().shape({\r\n  document: Yup.string()\r\n    .trim()\r\n    .matches(/^[0-9]*$/, \"Solo se admiten números.\")\r\n    .length(8, \"Se requiere 8 dígitos.\")\r\n    .required(\"DNI requerido.\"),\r\n  paternalSurname: Yup.string()\r\n    .trim()\r\n    .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n    .required(\"Apellido Paterno requerido.\"),\r\n  maternalSurname: Yup.string()\r\n    .trim()\r\n    .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n    .required(\"Apellido Materno requerido.\"),\r\n  name: Yup.string()\r\n    .trim()\r\n    .matches(/^[ñÑa-zA-ZáéíóúÁÉÍÓÚ ]*$/, \"Solo se admiten letras.\")\r\n    .required(\"Nombre requerido.\"),\r\n  schoolAgreement: Yup.object().shape({\r\n    id: Yup.number().nullable().required(\"Universidad requerida\"),\r\n  }),\r\n  specialty: Yup.object().shape({\r\n    id: Yup.number().nullable().required(\"Especialidad requerida\"),\r\n  }),\r\n  plaza: Yup.object().shape({\r\n    id: Yup.number().nullable().required(\"Plaza requerida.\"),\r\n  }),\r\n  campus: Yup.object().shape({\r\n    id: Yup.number().nullable().required(\"Sede requerida.\"),\r\n  }),\r\n  // team: Yup.object().shape({\r\n  //   id: Yup.number().nullable().required(\"Grupo requerido.\"),\r\n  // }),\r\n  address: Yup.string()\r\n    .trim()\r\n    // .matches(\r\n    //   /^[a-zA-Z\\s](\\d)?$/,\r\n    //   \"No se admiten caracteres especiales.\"\r\n    // ),\r\n    .min(5, \"El campo debe tener al menos 5 caracteres.\")\r\n    .required(\"Dirección es un campo requerido\"),\r\n  cmp: Yup.string()\r\n    .trim()\r\n    .matches(/^[0-9]*$/, \"Solo se admiten números.\")\r\n    .min(5, \"Solo se admite min. 5 dígitos.\")\r\n    .max(6, \"Solo se admite máx. 6 dígitos.\")\r\n    .required(\"CMP requerido\"),\r\n  email: Yup.string()\r\n    .trim()\r\n    .email(\"Formato no válido. (ej. correo@example.com)\")\r\n    .required(\"Correo requerido.\"),\r\n  phone: Yup.string()\r\n    .length(9, \"Se requiere 9 dígitos.\")\r\n    .required(\"N° Celular requerido.\"),\r\n});\r\n\r\nclass ImportFromExcel extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      isOpen: false,\r\n      dataLoaded: false,\r\n      isFormInvalid: false,\r\n      rows: null,\r\n      cols: null\r\n    }\r\n    this.fileHandler = this.fileHandler.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.openFileBrowser = this.openFileBrowser.bind(this);\r\n    this.renderFile = this.renderFile.bind(this);\r\n    this.fileInput = React.createRef();\r\n    this.saveImportedData = this.saveImportedData.bind(this);\r\n    this.converToDoctor = this.converToDoctor.bind(this);\r\n    this.excelDateToJSDate = this.excelDateToJSDate.bind(this);\r\n    this.cleanState = this.cleanState.bind(this);\r\n  }\r\n\r\n  renderFile = (fileObj) => {\r\n      //just pass the fileObj as parameter\r\n      ExcelRenderer(fileObj, (err, resp) => {\r\n        if(err){\r\n          console.log(err);            \r\n        }\r\n        else{\r\n          this.setState({\r\n            dataLoaded: true,\r\n            cols: resp.cols,\r\n            rows: resp.rows\r\n          });\r\n\r\n          // console.log(resp.rows);\r\n        }\r\n      }); \r\n  }\r\n\r\n  fileHandler = (event) => {    \r\n    if(event.target.files.length){\r\n      let fileObj = event.target.files[0];\r\n      let fileName = fileObj.name;\r\n\r\n      \r\n      //check for file extension and pass only if it is .xlsx and display error message otherwise\r\n      if(fileName.slice(fileName.lastIndexOf('.')+1) === \"xlsx\"){\r\n        this.setState({\r\n          uploadedFileName: fileName,\r\n          isFormInvalid: false\r\n        });\r\n        this.renderFile(fileObj)\r\n      }    \r\n      else{\r\n        this.setState({\r\n          isFormInvalid: true,\r\n          uploadedFileName: \"\"\r\n        })\r\n      }\r\n    }               \r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  openFileBrowser = () => {\r\n    this.fileInput.current.click();\r\n  }\r\n\r\n  cleanState(){\r\n    this.setState({\r\n      dataLoaded: false,\r\n      cols: null,\r\n      rows: null,\r\n      uploadedFileName : null\r\n    });\r\n  }\r\n\r\n  converToDoctor(row){\r\n    return {\r\n      \"id\" : null,\r\n      \"document\" : row[1] == \"\" || row[1] == null ? \"\" : row[1].toString(),\r\n      \"name\" : row[4] == \"\" || row[4] == null ? \"\" : row[4],\r\n      \"paternalSurname\" : row[2] == \"\" || row[2] == null ? \"\" : row[2],\r\n      \"maternalSurname\" : row[3] == \"\" || row[3] == null ? \"\" : row[3],\r\n      \"plaza\" : {\r\n        \"id\" : row[7].trim().toLowerCase() == \"libre\" ? 1 : 2,\r\n      },\r\n      \"campus\" : {\r\n        \"id\" : row[8],\r\n      },\r\n      \"birthDate\" : row[9] == \"\" || row[9] == null ? null : this.excelDateToJSDate(row[9]),\r\n      //\"birthDate\" : null,\r\n      \"address\" : row[10] == \"\" || row[10] == null ? null : row[10],\r\n      \"cmp\" : row[11] == \"\" || row[11] == null ? null : row[11].toString(),\r\n      \"email\" : row[12] == \"\" || row[12] == null ? \"\" : row[12],\r\n      \"phone\" : row[13]  == \"\" || row[13] == null ? \"\" : row[13].toString(),\r\n      \"schoolAgreement\" : {\r\n        \"school\" : {\r\n          \"shortName\" : row[5]  == \"\" || row[5] == null ? null : row[5].toString(),\r\n        }\r\n      },\r\n      \"specialty\" : {\r\n        \"id\" : row[6]\r\n      },\r\n      \"status\" : true,\r\n      \"team\" : null,\r\n      \"nivel\" : {\r\n        \"id\" : 1\r\n      },\r\n      \"registeredAt\" : row[14] == \"\" || row[14] == null ? null : this.excelDateToJSDate(row[14]),\r\n    }\r\n  }\r\n\r\n  excelDateToJSDate(serial) {\r\n    var utc_days  = Math.floor(serial - 25569);\r\n    var utc_value = utc_days * 86400;                                        \r\n    var date_info = new Date(utc_value * 1000);\r\n \r\n    var fractional_day = serial - Math.floor(serial) + 0.0000001;\r\n \r\n    var total_seconds = Math.floor(86400 * fractional_day);\r\n \r\n    var seconds = total_seconds % 60;\r\n \r\n    total_seconds -= seconds;\r\n \r\n    var hours = Math.floor(total_seconds / (60 * 60));\r\n    var minutes = Math.floor(total_seconds / 60) % 60;\r\n \r\n    return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate()+1, hours, minutes, seconds);\r\n }\r\n\r\n  saveImportedData = () => {\r\n    let lstDoctors = this.state.rows;\r\n    lstDoctors = lstDoctors.filter((doctor, key) => key > 0);\r\n    let transformedArr = lstDoctors.map(this.converToDoctor);\r\n    console.log(transformedArr);\r\n    this.props.onImportdata(transformedArr).then((resp) => {\r\n        console.log(resp);\r\n        this.cleanState();\r\n        this.props.onListDoctors();\r\n        this.props.onOpenNotification(\"Datos importados correctamente\", \"\", \"topRight\");\r\n        this.props.onVisibleModal();        \r\n    }).catch(function(err){\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col sm=\"4\">   \r\n          {this.state.uploadedFileName ? <h3>Cargando archivo \"{this.state.uploadedFileName}\"</h3> : <h3>Cargar Archivo Excel</h3>}\r\n          </Col>                \r\n          <Col sm=\"4\" >                                                     \r\n            <InputGroup>\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                  <Button onClick={this.openFileBrowser.bind(this)} type=\"primary\" size=\"large\"><i ></i> Buscar...</Button>\r\n                  { this.state.dataLoaded &&\r\n                    <Button onClick={this.saveImportedData.bind(this)} type=\"primary\" size=\"large\" style={{marginLeft:\"20px\"}}><i ></i>Guardar datos</Button>\r\n                  }                  \r\n                  <input type=\"file\" hidden onChange={this.fileHandler.bind(this)} ref={this.fileInput} onClick={(event)=> { event.target.value = null }}/>                                \r\n                </InputGroupAddon>\r\n                <Input type=\"text\" value={this.state.uploadedFileName} readOnly invalid={this.state.isFormInvalid} style={{\"display\":\"none\"}}/>                                              \r\n                <FormFeedback>    \r\n                  <Fade in={this.state.isFormInvalid} tag=\"h6\" style={{fontStyle: \"italic\"}}>\r\n                      ! Selecciona solo un archivo .xlsx !\r\n                  </Fade>                                                                \r\n                </FormFeedback>\r\n            </InputGroup>     \r\n          </Col>\r\n        </Row> \r\n        {this.state.dataLoaded && \r\n        <div>\r\n          <Card body outline color=\"secondary\" className=\"restrict-card\">              \r\n              <OutTable data={this.state.rows} columns={this.state.cols} tableClassName=\"ExcelTable2007\" tableHeaderRowClass=\"heading\" />              \r\n          </Card>  \r\n        </div>} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImportFromExcel;","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\SpecialtyService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\TableMesList.js",["339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361"],"import React, { useEffect, useState } from \"react\";\r\nimport { FilePdfTwoTone, EditOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Select } from \"antd\";\r\nimport { TableMes } from \"./TableMes\";\r\nimport { findAllTipos } from \"../../services/DoctorService\";\r\nimport { getAllAnioAcademico } from \"../../services/AnioAcademicoService\";\r\nimport { getAllMesDiaFiltrar, viewPdfServicioMesDia } from \"../../services/MesDiaService\";\r\nimport { getTeams, obtenerGruposPorTipo } from \"../../services/TeamService\";\r\n\r\nlet aniosAcademicos = [];\r\nlet teams = [];\r\n\r\nlet periodoData = [\r\n  {\r\n    numMes: 7,\r\n    nameMes: \"Julio\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 8,\r\n    nameMes: \"Agosto\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 9,\r\n    nameMes: \"Septiembre\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 10,\r\n    nameMes: \"Octubre\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 11,\r\n    nameMes: \"Noviembre\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 12,\r\n    nameMes: \"Diciembre\",\r\n    year: 2019,\r\n  },\r\n  {\r\n    numMes: 1,\r\n    nameMes: \"Enero\",\r\n    year: 2020,\r\n  },\r\n  {\r\n    numMes: 2,\r\n    nameMes: \"Febrero\",\r\n    year: 2020,\r\n  },\r\n  {\r\n    numMes: 3,\r\n    nameMes: \"Marzo\",\r\n    year: 2020,\r\n  },\r\n  {\r\n    numMes: 4,\r\n    nameMes: \"Abril\",\r\n    year: 2020,\r\n  },\r\n  {\r\n    numMes: 5,\r\n    nameMes: \"Mayo\",\r\n    year: 2020,\r\n  },\r\n  {\r\n    numMes: 6,\r\n    nameMes: \"Junio\",\r\n    year: 2020,\r\n  },\r\n];\r\n\r\nexport const TableMesList = () => {\r\n  const [numMes, setNumMes] = useState(null);\r\n  const [periodo, setPeriodo] = useState([]);\r\n\r\n  const [lstPeriodo, setLstPeriodo] = useState([]);\r\n  \r\n  const [idAnio, setIdAnio] = useState(null);   \r\n\r\n\r\n  const [placeCategoria, setPlaceCategoria] = useState('Seleccione una Categoría');\r\n  const [idTeam, setIdTeam] = useState(null);\r\n  const [categoriaId, setCategoria] = useState(null);  \r\n  const [categoriaslst, setCategoriaslst] = useState([]);\r\n  \r\n  const [anioAcademicolst, setAnioAcademicolst] = useState([]);\r\n  const [anioAcademicoCombo, setAnioAcademicoCombo] = useState([]);\r\n\r\n  const [mes, setMes] = useState(-5);\r\n  const [anio, setAnio] = useState(-5);\r\n  const [cate, setCate] = useState(-5);  \r\n\r\n  // const [filter, setFilter] = useState([]);\r\n\r\n  const clearFilter = () => { \r\n    setMes(-5);\r\n    var lstMain = [];\r\n    // setLstPeriodo(lstMain);    \r\n  };\r\n\r\n  function clear() {\r\n    var lstMain = [];\r\n    // setLstPeriodo(lstMain);    \r\n  }\r\n  \r\n  const exportarPeriodo = () => { \r\n    viewPdfServicioMesDia(lstPeriodo);    \r\n  };  \r\n\r\n  const handleSelectMes = (e) => {\r\n\r\n    setNumMes(e);\r\n    setPeriodo(periodoData.filter((data) => (data.numMes === e)));\r\n    setMes(e);\r\n    var lst = [];\r\n    \r\n    if(anio != -5 && anio != null  && e != null && cate != -5 && cate != null)\r\n    {\r\n      getAllMesDiaFiltrar(anio, e, cate).then( x => \r\n        {            \r\n        console.log(x);\r\n          lst.push(x[0]);\r\n        setLstPeriodo(lst);\r\n      }).catch(err => setLstPeriodo([]));\r\n    }    \r\n    setLstPeriodo(lst);\r\n  };\r\n\r\n  const handleSelectAnioAcademico = (e) => {\r\n   \r\n    setIdAnio(e);\r\n    setAnioAcademicoCombo(anioAcademicolst.filter((data) => (data.id === e)));\r\n    setAnio(e);\r\n\r\n\r\n    if(cate != -5 && anio != -5 ){\r\n\r\n      if(mes == -5){\r\n        var lst = [];\r\n        var itemsProcessed = 0;\r\n        periodoData.forEach( per => {\r\n          getAllMesDiaFiltrar(e, per.numMes, cate).then( x => {\r\n            lst.push(x[0]);\r\n            itemsProcessed++;\r\n            if(itemsProcessed === periodoData.length) {\r\n              lst.sort(function(a, b) {\r\n                var keyA = a.anio,\r\n                  keyB = b.anio;\r\n                if (keyA < keyB) return -1;\r\n                if (keyA > keyB) return 1;\r\n                return 0;\r\n              });\r\n\r\n              \r\n              setLstPeriodo(lst);\r\n            }\r\n        \r\n          }).catch(err => setLstPeriodo([]));\r\n        })\r\n      }else{\r\n        if(cate != -5 && anio != -5 && anio != null && e != null && cate != null)\r\n        {\r\n          getAllMesDiaFiltrar(e, mes, cate).then( x => {\r\n            lst = [];\r\n            lst.push(x[0]);\r\n              setLstPeriodo(lst);   \r\n            \r\n          }).catch(err => setLstPeriodo([]));     ;\r\n        }\r\n      }\r\n    };\r\n    }\r\n\r\n\r\n  const hanldeSelectCategoria = (e) => {\r\n    \r\n      teams = [];\r\n      setCategoria(e);\r\n      cargarListado(e);         \r\n      setCate(e);  \r\n      if(anio != null && e != null && mes != null && cate != -5 && anio != -5 && mes != -5)\r\n      {\r\n        obtenerGruposPorTipo(e).then((resp) => {\r\n          resp.forEach((data) => {\r\n            teams.push(data.id);\r\n          });\r\n        });\r\n\r\n         \r\n        if(mes == -5){\r\n          var lst = [];\r\n          var itemsProcessed = 0;\r\n          periodoData.forEach( per => {\r\n            getAllMesDiaFiltrar(anio, per.numMes, e).then( x => {\r\n              lst.push(x[0]);\r\n              itemsProcessed++;\r\n              if(itemsProcessed === periodoData.length) {\r\n        \r\n\r\n                lst.sort(function(a, b) {\r\n                  var keyA = a.anio,\r\n                    keyB = b.anio;\r\n                  if (keyA < keyB) return -1;\r\n                  if (keyA > keyB) return 1;\r\n                  return 0;\r\n                });\r\n\r\n                setLstPeriodo(lst);\r\n              }\r\n            }).catch(err => setLstPeriodo([]));     ;\r\n            \r\n          });        \r\n\r\n        }else{          \r\n            getAllMesDiaFiltrar(anio, mes, e).then( x => {\r\n              lst = [];\r\n              lst.push(x[0]);\r\n              setLstPeriodo(lst);\r\n            }).catch(err => setLstPeriodo([]));      \r\n        }\r\n      }\r\n};\r\n\r\nconst cargarListado = (cate) => {\r\n\r\n\r\n\r\n};\r\n\r\n  useEffect(() => {\r\n\r\n\r\n  \r\n  \r\n\r\n    getAllAnioAcademico().then( x => {\r\n      setAnioAcademicolst(x);      \r\n    }); \r\n\r\n    setPeriodo([]);\r\n\r\n    findAllTipos().then( x =>\r\n      {  \r\n        setCategoriaslst(x);\r\n      }\r\n    );\r\n\r\n    obtenerGruposPorTipo(1).then((resp) => {\r\n      resp.forEach((data) => {\r\n        teams.push(data.id);\r\n      });      \r\n    });\r\n\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        layout=\"vertical\"\r\n        style={{\r\n          marginBottom: \"20px\",\r\n          display: \"flex\",\r\n          alignItems: \"flex-end\",\r\n        }}\r\n      >\r\n        <Form.Item label=\"Año Académico\">\r\n        <Select\r\n            showSearch\r\n            name=\"idAnio\"\r\n            placeholder=\"Seleccione un año\"\r\n            optionFilterProp=\"children\"\r\n            style={{ width: \"300px\",  marginRight: '10px' }}\r\n            value={idAnio}\r\n            \r\n            onChange={handleSelectAnioAcademico}\r\n            filterOption={(input, option) =>\r\n              option.props.children\r\n                .toLowerCase()\r\n                .indexOf(input.toLowerCase()) >= 0\r\n            }\r\n          >\r\n            {anioAcademicolst.map((data) => (\r\n              <Select.Option key={data.id} value={data.id}>\r\n                {data.anioInicio + \" - \" + data.anioFinal} \r\n              </Select.Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Categoría\">\r\n            <Select\r\n              showSearch\r\n              name=\"cateogria\"\r\n              placeholder= {placeCategoria}\r\n              optionFilterProp=\"children\"\r\n              style={{ width: \"300px\"}}\r\n              value={categoriaId}\r\n              onChange={hanldeSelectCategoria}\r\n             \r\n              filterOption={(input, option) =>\r\n                option.props.children\r\n                  .toLowerCase()\r\n                  .indexOf(input.toLowerCase()) >= 0\r\n              }\r\n            >\r\n                {categoriaslst.map((data) => (\r\n                <Select.Option key={data.name} value={data.id} >\r\n                {data.name}\r\n                </Select.Option>\r\n                ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n        <Form.Item label=\"Mes\">\r\n          <Select\r\n            showSearch\r\n            name=\"numMes\"\r\n            placeholder=\"Seleccione una mes\"\r\n            optionFilterProp=\"children\"\r\n            style={{ width: \"300px\",  marginRight: '10px' }}\r\n            value={numMes}\r\n            \r\n            onChange={handleSelectMes}\r\n            filterOption={(input, option) =>\r\n              option.props.children\r\n                .toLowerCase()\r\n                .indexOf(input.toLowerCase()) >= 0\r\n            }\r\n          >\r\n            {periodoData.map((data) => (\r\n              <Select.Option key={data.numMes} value={data.numMes}>\r\n                {data.nameMes}\r\n              </Select.Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item style={{ marginLeft: \"10px\" }}>\r\n\r\n        <Button\r\n          type=\"dashed\"\r\n          color=\"red\"\r\n          size=\"large\"\r\n          danger\r\n          onClick={exportarPeriodo}\r\n        >\r\n          <FilePdfTwoTone twoToneColor=\"red\" /> Exportar a PDF\r\n        </Button>\r\n\r\n        </Form.Item>\r\n      </Form>\r\n      <div>      \r\n\r\n       {lstPeriodo.map((data) => (         \r\n            <TableMes key={data.key} dataTabla={data} listaGrupos={teams}>\r\n            </TableMes>\r\n        ))} \r\n\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  \r\n\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Header\\index.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Sidebar\\index.js",["362","363"],"import React, { useContext, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { FileTextFilled, ToolFilled, DashboardFilled } from \"@ant-design/icons\";\r\nimport { AuthContext } from \"../../auth/AuthContext\";\r\nimport LogoHospital from \"../../images/logo_essalud.jpg\";\r\nimport \"./Sidebar.css\";\r\n\r\nexport const Sidebar = () => {\r\n\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const {user} = useContext(AuthContext);      \r\n  \r\n  const adminMenu = () => {\r\n    if(user.roles.includes(\"ROLE_ADMIN\"))\r\n    { \r\n      return (\r\n        <React.Fragment>\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/inicio\" activeClassName=\"active\">\r\n                • Inicio\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <span className=\"title\">\r\n                <DashboardFilled /> PROCESOS\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/proceso/asignar-servicio\" activeClassName=\"active\">\r\n                • Asignar Servicio\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/proceso/asignar-convenio\" activeClassName=\"active\">\r\n                • Asignar Convenio\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/grupo\" activeClassName=\"active\">\r\n                • Asignar Médicos a Grupos\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/proceso/asignar-grupo\" activeClassName=\"active\">\r\n                • Grupo de guardia en emergencia\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <span className=\"title\">\r\n                <ToolFilled /> MANTENIMIENTOS\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/universidad\" activeClassName=\"active\" >\r\n                • Universidad\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/especialidad\" activeClassName=\"active\">\r\n                • Especialidad\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/medico\" activeClassName=\"active\">\r\n                • Médico\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/servicio\" activeClassName=\"active\">\r\n                • Servicio\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/especialidad-servicio\" activeClassName=\"active\">\r\n                • Asignar Servicios a Especialidad\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/mantenimiento/grupomant\" activeClassName=\"active\">\r\n                • Grupos\r\n              </NavLink>\r\n            </li>\r\n            \r\n            <li>\r\n              <NavLink to=\"/mantenimiento/usuario\" >\r\n                • Usuarios\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </React.Fragment>\r\n      )\r\n    } else{\r\n      return null;\r\n    }\r\n    \r\n  }  \r\n  return (        \r\n    <div className=\"left\" style={{overflowY:\"scroll\"}}>\r\n      <div className=\"logo\">\r\n        <img src={LogoHospital} alt=\"Logo Harrison\" />\r\n        <h2>Hospital Almenara</h2>\r\n      </div>       \r\n      {adminMenu()}\r\n      <ul>\r\n        <li>\r\n          <span className=\"title\">\r\n            <FileTextFilled /> REPORTES\r\n          </span>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/reporte/medico\" activeClassName=\"active\">\r\n            • Médico\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/reporte/especialidad\" activeClassName=\"active\">\r\n            • Especialidad\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/reporte/servicio\" activeClassName=\"active\">\r\n            • Servicio\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/reporte/servicio/relacion-medicos-residentes-otras-especialidades-por-periodo\" activeClassName=\"active\">\r\n            • Medicos Residentes de otras Especialidades por Periodo\r\n          </NavLink>\r\n        </li>        \r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\services\\MesDiaService.js",[],"D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\TableMes.js",["364","365","366","367","368","369","370"],"import { Divider } from \"antd\";\r\nimport React from \"react\";\r\nimport { SelectTd } from \"./SelectTd\";\r\n\r\n\r\n\r\n\r\n\r\nlet diasSemana = [\r\n  \"Domingo\",\r\n  \"Lunes\",\r\n  \"Martes\",\r\n  \"Miércoles\",\r\n  \"Jueves\",\r\n  \"Viernes\",\r\n  \"Sabado\",\r\n];\r\n\r\n\r\nexport const TableMes = ({ dataTabla, listaGrupos}) => {\r\n  console.log(listaGrupos);\r\n  let days = [];\r\n  let daysName = []; \r\n  let agrupado = [];\r\n  let mes = [];\r\n  let turno = [];\r\n  let dia = {};\r\n\r\n  var mesName = '';\r\n  var year = null;\r\n  var llave = 1;\r\n\r\n  var turnosDiurno = [];\r\n  var turnosNocturno = [];\r\n  \r\n  \r\n\r\n  // dataTabla.sort(compare);\r\n\r\n    mesName = dataTabla.mes;\r\n    year = dataTabla.anio;\r\n    turnosDiurno = dataTabla.turnosDiurno.dias;\r\n    turnosNocturno = dataTabla.turnosNocturno.dias;\r\n    llave = dataTabla.key;\r\n\r\n\r\n  return (\r\n    <div>\r\n    \r\n      <Divider orientation=\"left\">\r\n        <h3>\r\n          <b>\r\n            {mesName} - {year}\r\n          </b>\r\n        </h3>\r\n      </Divider> \r\n       <div className=\"table-responsive\">\r\n        <table className=\"table table-hover\" style={{ textAlign: \"center\" }}>\r\n          <thead>\r\n            <tr key={llave}>\r\n              <th key={llave + mesName } rowSpan=\"2\">{mesName}</th>\r\n              {turnosDiurno.map((data) => (\r\n                data.diaNombre === \"D\" || data === \"S\" ?\r\n                <th key={llave + data.idReg + ''} style={{color: \"red\"}}>{String(data.diaNombre)}</th> :\r\n                <th key={llave + data.idReg + ''}>{String(data.diaNombre)}</th> \r\n              ))}\r\n            </tr>\r\n            <tr>\r\n              {turnosDiurno.map((data) => (\r\n                <th key={llave + data.idReg + ''}>{data.idDia}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr key={llave + 99}>\r\n              <td>GUARDIA DIURNA</td>\r\n              {turnosDiurno.map((data) =>\r\n                data.diaNombre === \"D\" || data.diaNombre === \"S\" ? (\r\n                  <SelectTd key={llave + data.idReg + ''} isBgGray={true} dia={data} teamslist={listaGrupos} />\r\n                  ) : (\r\n                    <SelectTd  key={llave + data.idReg + ''} isBgGray={false} dia={data} teamslist={listaGrupos} />\r\n                )\r\n              )}\r\n            </tr>\r\n            <tr>\r\n              <td>GUARDIA NOCTURNA</td>\r\n              {turnosNocturno.map((data) =>\r\n                data.diaNombre === \"D\" || data.diaNombre === \"S\" ? (\r\n                  <SelectTd key={llave + data.idReg + ''} isBgGray={true} dia={data} teamslist={listaGrupos} />\r\n                ) : (\r\n                  <SelectTd key={llave + data.idReg + ''} isBgGray={false} dia={data} teamslist={listaGrupos} />\r\n                )\r\n              )}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div> \r\n    </div>\r\n  );\r\n};\r\n\r\n","D:\\Desarrollo\\React\\hospital-almenara-app\\src\\components\\Grupos\\SelectTd.js",["371","372","373","374"],"import React, { useEffect, useState } from \"react\";\r\nimport {  actualuzarMesDia } from \"../../services/MesDiaService\";\r\n\r\nimport {\r\n  notification\r\n} from \"antd\";\r\n\r\nlet teams = [];\r\n\r\nexport const SelectTd = ({ isBgGray, dia, teamslist}) => {\r\n  const [teamId, setTeamId] = useState();\r\n  const [styleTd, setStyleTd] = useState({});\r\n  const [teamslst, setTeamslst] = useState([]);\r\n  \r\n\r\n  \r\nconst openNotification = (msg, description, placement) => {\r\n  notification.success({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\nconst openErrorNotification = (msg, description, placement) => {\r\n  notification.error({\r\n    message: msg,\r\n    description: description,\r\n    placement,\r\n  });\r\n};\r\n\r\n  const handleSelect = (e) => {\r\n    var aux = teamId;\r\n    console.log(dia.idReg);\r\n    console.log(e.target.value);\r\n    setTeamId(e.target.value);\r\n\r\n    \r\n\r\n    actualuzarMesDia(dia.idReg, e.target.value).then((resp) => {\r\n      console.log(resp);\r\n      if(resp.nombreDia.length > 5){\r\n        setTeamId(aux);\r\n        openErrorNotification(resp.nombreDia, \"\", \"topRight\");            \r\n      }else{        \r\n        openNotification(\"Guardado Correctamente\", \"\", \"topRight\");      \r\n      }      \r\n    }).catch(function (error) {\r\n      if (error.response) \r\n      {\r\n        \r\n      }\r\n    });   \r\n\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n   \r\n    setTeamId(dia.grupo);\r\n\r\n    if (isBgGray === true) {\r\n      setStyleTd({\r\n        padding: \"5px\",\r\n        background: \"#aaa\",\r\n      });\r\n    } else {\r\n      setStyleTd({\r\n        padding: \"5px\",\r\n        background: \"#fff\",\r\n      });\r\n    }\r\n  }, [isBgGray]);\r\n\r\n  return (\r\n    <td style={styleTd}>\r\n      <select\r\n        name=\"teamId\"\r\n        style={{ width: \"40px\" }}\r\n        value={teamId}\r\n        onChange={handleSelect}\r\n      >\r\n        {teamslist.map((data) => (\r\n          <option key={data} value={data}>\r\n            {data}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </td>\r\n  );\r\n};\r\n",{"ruleId":"375","replacedBy":"376"},{"ruleId":"377","replacedBy":"378"},{"ruleId":"379","severity":1,"message":"380","line":3,"column":8,"nodeType":"381","messageId":"382","endLine":3,"endColumn":13},{"ruleId":"379","severity":1,"message":"383","line":1,"column":10,"nodeType":"381","messageId":"382","endLine":1,"endColumn":24},{"ruleId":"379","severity":1,"message":"384","line":9,"column":51,"nodeType":"381","messageId":"382","endLine":9,"endColumn":56},{"ruleId":"379","severity":1,"message":"385","line":9,"column":65,"nodeType":"381","messageId":"382","endLine":9,"endColumn":68},{"ruleId":"379","severity":1,"message":"386","line":9,"column":70,"nodeType":"381","messageId":"382","endLine":9,"endColumn":73},{"ruleId":"387","severity":1,"message":"388","line":37,"column":128,"nodeType":"389","messageId":"390","endLine":37,"endColumn":130},{"ruleId":"379","severity":1,"message":"391","line":111,"column":9,"nodeType":"381","messageId":"382","endLine":111,"endColumn":20},{"ruleId":"387","severity":1,"message":"388","line":231,"column":102,"nodeType":"389","messageId":"390","endLine":231,"endColumn":104},{"ruleId":"379","severity":1,"message":"392","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"393","line":9,"column":3,"nodeType":"381","messageId":"382","endLine":9,"endColumn":6},{"ruleId":"379","severity":1,"message":"394","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"395","line":13,"column":3,"nodeType":"381","messageId":"382","endLine":13,"endColumn":15},{"ruleId":"379","severity":1,"message":"396","line":16,"column":22,"nodeType":"381","messageId":"382","endLine":16,"endColumn":38},{"ruleId":"379","severity":1,"message":"397","line":17,"column":3,"nodeType":"381","messageId":"382","endLine":17,"endColumn":15},{"ruleId":"379","severity":1,"message":"398","line":31,"column":10,"nodeType":"381","messageId":"382","endLine":31,"endColumn":20},{"ruleId":"387","severity":1,"message":"388","line":61,"column":42,"nodeType":"389","messageId":"390","endLine":61,"endColumn":44},{"ruleId":"387","severity":1,"message":"388","line":63,"column":45,"nodeType":"389","messageId":"390","endLine":63,"endColumn":47},{"ruleId":"387","severity":1,"message":"388","line":71,"column":42,"nodeType":"389","messageId":"390","endLine":71,"endColumn":44},{"ruleId":"387","severity":1,"message":"388","line":73,"column":45,"nodeType":"389","messageId":"390","endLine":73,"endColumn":47},{"ruleId":"379","severity":1,"message":"399","line":113,"column":9,"nodeType":"381","messageId":"382","endLine":113,"endColumn":21},{"ruleId":"379","severity":1,"message":"400","line":118,"column":9,"nodeType":"381","messageId":"382","endLine":118,"endColumn":27},{"ruleId":"387","severity":1,"message":"388","line":129,"column":12,"nodeType":"389","messageId":"390","endLine":129,"endColumn":14},{"ruleId":"387","severity":1,"message":"388","line":134,"column":12,"nodeType":"389","messageId":"390","endLine":134,"endColumn":14},{"ruleId":"401","severity":1,"message":"402","line":146,"column":24,"nodeType":"403","messageId":"404","endLine":146,"endColumn":26},{"ruleId":"387","severity":1,"message":"388","line":147,"column":15,"nodeType":"389","messageId":"390","endLine":147,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":161,"column":18,"nodeType":"403","messageId":"404","endLine":161,"endColumn":20},{"ruleId":"387","severity":1,"message":"388","line":163,"column":20,"nodeType":"389","messageId":"390","endLine":163,"endColumn":22},{"ruleId":"405","severity":1,"message":"406","line":346,"column":139,"nodeType":"407","messageId":"390","endLine":346,"endColumn":144},{"ruleId":"405","severity":1,"message":"406","line":348,"column":139,"nodeType":"407","messageId":"390","endLine":348,"endColumn":144},{"ruleId":"405","severity":1,"message":"406","line":350,"column":139,"nodeType":"407","messageId":"390","endLine":350,"endColumn":144},{"ruleId":"387","severity":1,"message":"388","line":369,"column":32,"nodeType":"389","messageId":"390","endLine":369,"endColumn":34},{"ruleId":"387","severity":1,"message":"388","line":373,"column":35,"nodeType":"389","messageId":"390","endLine":373,"endColumn":37},{"ruleId":"379","severity":1,"message":"408","line":17,"column":10,"nodeType":"381","messageId":"382","endLine":17,"endColumn":21},{"ruleId":"379","severity":1,"message":"409","line":18,"column":33,"nodeType":"381","messageId":"382","endLine":18,"endColumn":41},{"ruleId":"379","severity":1,"message":"410","line":23,"column":10,"nodeType":"381","messageId":"382","endLine":23,"endColumn":16},{"ruleId":"379","severity":1,"message":"411","line":82,"column":12,"nodeType":"381","messageId":"382","endLine":82,"endColumn":30},{"ruleId":"387","severity":1,"message":"388","line":136,"column":23,"nodeType":"389","messageId":"390","endLine":136,"endColumn":25},{"ruleId":"387","severity":1,"message":"388","line":136,"column":42,"nodeType":"389","messageId":"390","endLine":136,"endColumn":44},{"ruleId":"387","severity":1,"message":"388","line":151,"column":28,"nodeType":"389","messageId":"390","endLine":151,"endColumn":30},{"ruleId":"387","severity":1,"message":"388","line":151,"column":50,"nodeType":"389","messageId":"390","endLine":151,"endColumn":52},{"ruleId":"379","severity":1,"message":"412","line":16,"column":3,"nodeType":"381","messageId":"382","endLine":16,"endColumn":10},{"ruleId":"379","severity":1,"message":"413","line":18,"column":3,"nodeType":"381","messageId":"382","endLine":18,"endColumn":9},{"ruleId":"379","severity":1,"message":"414","line":21,"column":38,"nodeType":"381","messageId":"382","endLine":21,"endColumn":57},{"ruleId":"379","severity":1,"message":"415","line":21,"column":59,"nodeType":"381","messageId":"382","endLine":21,"endColumn":73},{"ruleId":"379","severity":1,"message":"416","line":23,"column":9,"nodeType":"381","messageId":"382","endLine":23,"endColumn":17},{"ruleId":"379","severity":1,"message":"417","line":67,"column":10,"nodeType":"381","messageId":"382","endLine":67,"endColumn":15},{"ruleId":"379","severity":1,"message":"418","line":70,"column":10,"nodeType":"381","messageId":"382","endLine":70,"endColumn":16},{"ruleId":"379","severity":1,"message":"419","line":70,"column":18,"nodeType":"381","messageId":"382","endLine":70,"endColumn":25},{"ruleId":"379","severity":1,"message":"420","line":71,"column":10,"nodeType":"381","messageId":"382","endLine":71,"endColumn":20},{"ruleId":"379","severity":1,"message":"421","line":72,"column":10,"nodeType":"381","messageId":"382","endLine":72,"endColumn":23},{"ruleId":"379","severity":1,"message":"422","line":73,"column":10,"nodeType":"381","messageId":"382","endLine":73,"endColumn":14},{"ruleId":"379","severity":1,"message":"423","line":74,"column":10,"nodeType":"381","messageId":"382","endLine":74,"endColumn":14},{"ruleId":"379","severity":1,"message":"424","line":75,"column":10,"nodeType":"381","messageId":"382","endLine":75,"endColumn":26},{"ruleId":"387","severity":1,"message":"388","line":89,"column":62,"nodeType":"389","messageId":"390","endLine":89,"endColumn":64},{"ruleId":"387","severity":1,"message":"388","line":90,"column":62,"nodeType":"389","messageId":"390","endLine":90,"endColumn":64},{"ruleId":"387","severity":1,"message":"388","line":91,"column":74,"nodeType":"389","messageId":"390","endLine":91,"endColumn":76},{"ruleId":"387","severity":1,"message":"388","line":92,"column":68,"nodeType":"389","messageId":"390","endLine":92,"endColumn":70},{"ruleId":"387","severity":1,"message":"388","line":197,"column":22,"nodeType":"389","messageId":"390","endLine":197,"endColumn":24},{"ruleId":"387","severity":1,"message":"388","line":197,"column":40,"nodeType":"389","messageId":"390","endLine":197,"endColumn":42},{"ruleId":"387","severity":1,"message":"388","line":211,"column":27,"nodeType":"389","messageId":"390","endLine":211,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":211,"column":48,"nodeType":"389","messageId":"390","endLine":211,"endColumn":50},{"ruleId":"379","severity":1,"message":"425","line":231,"column":12,"nodeType":"381","messageId":"382","endLine":231,"endColumn":26},{"ruleId":"379","severity":1,"message":"426","line":467,"column":9,"nodeType":"381","messageId":"382","endLine":467,"endColumn":28},{"ruleId":"379","severity":1,"message":"427","line":486,"column":9,"nodeType":"381","messageId":"382","endLine":486,"endColumn":14},{"ruleId":"379","severity":1,"message":"428","line":523,"column":9,"nodeType":"381","messageId":"382","endLine":523,"endColumn":20},{"ruleId":"429","severity":1,"message":"430","line":177,"column":6,"nodeType":"431","endLine":177,"endColumn":8,"suggestions":"432"},{"ruleId":"379","severity":1,"message":"433","line":42,"column":10,"nodeType":"381","messageId":"382","endLine":42,"endColumn":16},{"ruleId":"379","severity":1,"message":"434","line":45,"column":30,"nodeType":"381","messageId":"382","endLine":45,"endColumn":51},{"ruleId":"379","severity":1,"message":"384","line":3,"column":15,"nodeType":"381","messageId":"382","endLine":3,"endColumn":20},{"ruleId":"379","severity":1,"message":"393","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":6},{"ruleId":"379","severity":1,"message":"394","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"395","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":15},{"ruleId":"379","severity":1,"message":"435","line":15,"column":10,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"379","severity":1,"message":"436","line":15,"column":24,"nodeType":"381","messageId":"382","endLine":15,"endColumn":34},{"ruleId":"379","severity":1,"message":"437","line":15,"column":36,"nodeType":"381","messageId":"382","endLine":15,"endColumn":52},{"ruleId":"379","severity":1,"message":"438","line":16,"column":10,"nodeType":"381","messageId":"382","endLine":16,"endColumn":20},{"ruleId":"379","severity":1,"message":"396","line":16,"column":22,"nodeType":"381","messageId":"382","endLine":16,"endColumn":38},{"ruleId":"379","severity":1,"message":"439","line":16,"column":40,"nodeType":"381","messageId":"382","endLine":16,"endColumn":60},{"ruleId":"379","severity":1,"message":"440","line":16,"column":62,"nodeType":"381","messageId":"382","endLine":16,"endColumn":85},{"ruleId":"379","severity":1,"message":"441","line":16,"column":87,"nodeType":"381","messageId":"382","endLine":16,"endColumn":110},{"ruleId":"379","severity":1,"message":"397","line":17,"column":3,"nodeType":"381","messageId":"382","endLine":17,"endColumn":15},{"ruleId":"379","severity":1,"message":"442","line":17,"column":17,"nodeType":"381","messageId":"382","endLine":17,"endColumn":34},{"ruleId":"379","severity":1,"message":"443","line":17,"column":36,"nodeType":"381","messageId":"382","endLine":17,"endColumn":53},{"ruleId":"379","severity":1,"message":"444","line":19,"column":22,"nodeType":"381","messageId":"382","endLine":19,"endColumn":33},{"ruleId":"379","severity":1,"message":"445","line":19,"column":35,"nodeType":"381","messageId":"382","endLine":19,"endColumn":50},{"ruleId":"379","severity":1,"message":"446","line":43,"column":10,"nodeType":"381","messageId":"382","endLine":43,"endColumn":16},{"ruleId":"387","severity":1,"message":"388","line":82,"column":28,"nodeType":"389","messageId":"390","endLine":82,"endColumn":30},{"ruleId":"387","severity":1,"message":"388","line":192,"column":10,"nodeType":"389","messageId":"390","endLine":192,"endColumn":12},{"ruleId":"387","severity":1,"message":"388","line":196,"column":10,"nodeType":"389","messageId":"390","endLine":196,"endColumn":12},{"ruleId":"379","severity":1,"message":"447","line":7,"column":3,"nodeType":"381","messageId":"382","endLine":7,"endColumn":40},{"ruleId":"379","severity":1,"message":"448","line":13,"column":10,"nodeType":"381","messageId":"382","endLine":13,"endColumn":24},{"ruleId":"379","severity":1,"message":"449","line":18,"column":10,"nodeType":"381","messageId":"382","endLine":18,"endColumn":15},{"ruleId":"379","severity":1,"message":"450","line":22,"column":10,"nodeType":"381","messageId":"382","endLine":22,"endColumn":21},{"ruleId":"379","severity":1,"message":"451","line":25,"column":10,"nodeType":"381","messageId":"382","endLine":25,"endColumn":15},{"ruleId":"379","severity":1,"message":"452","line":66,"column":9,"nodeType":"381","messageId":"382","endLine":66,"endColumn":20},{"ruleId":"387","severity":1,"message":"388","line":223,"column":89,"nodeType":"389","messageId":"390","endLine":223,"endColumn":91},{"ruleId":"379","severity":1,"message":"453","line":3,"column":10,"nodeType":"381","messageId":"382","endLine":3,"endColumn":22},{"ruleId":"379","severity":1,"message":"437","line":14,"column":36,"nodeType":"381","messageId":"382","endLine":14,"endColumn":52},{"ruleId":"379","severity":1,"message":"454","line":13,"column":7,"nodeType":"381","messageId":"382","endLine":13,"endColumn":36},{"ruleId":"379","severity":1,"message":"384","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":15},{"ruleId":"379","severity":1,"message":"455","line":4,"column":9,"nodeType":"381","messageId":"382","endLine":4,"endColumn":18},{"ruleId":"379","severity":1,"message":"456","line":4,"column":66,"nodeType":"381","messageId":"382","endLine":4,"endColumn":75},{"ruleId":"379","severity":1,"message":"457","line":4,"column":77,"nodeType":"381","messageId":"382","endLine":4,"endColumn":82},{"ruleId":"379","severity":1,"message":"458","line":6,"column":8,"nodeType":"381","messageId":"382","endLine":6,"endColumn":14},{"ruleId":"379","severity":1,"message":"459","line":9,"column":7,"nodeType":"381","messageId":"382","endLine":9,"endColumn":27},{"ruleId":"387","severity":1,"message":"388","line":149,"column":27,"nodeType":"389","messageId":"390","endLine":149,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":150,"column":23,"nodeType":"389","messageId":"390","endLine":150,"endColumn":25},{"ruleId":"387","severity":1,"message":"388","line":151,"column":34,"nodeType":"389","messageId":"390","endLine":151,"endColumn":36},{"ruleId":"387","severity":1,"message":"388","line":152,"column":34,"nodeType":"389","messageId":"390","endLine":152,"endColumn":36},{"ruleId":"387","severity":1,"message":"388","line":154,"column":44,"nodeType":"389","messageId":"390","endLine":154,"endColumn":46},{"ruleId":"387","severity":1,"message":"388","line":159,"column":28,"nodeType":"389","messageId":"390","endLine":159,"endColumn":30},{"ruleId":"387","severity":1,"message":"388","line":161,"column":27,"nodeType":"389","messageId":"390","endLine":161,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":162,"column":23,"nodeType":"389","messageId":"390","endLine":162,"endColumn":25},{"ruleId":"387","severity":1,"message":"388","line":163,"column":25,"nodeType":"389","messageId":"390","endLine":163,"endColumn":27},{"ruleId":"387","severity":1,"message":"388","line":164,"column":26,"nodeType":"389","messageId":"390","endLine":164,"endColumn":28},{"ruleId":"387","severity":1,"message":"388","line":167,"column":33,"nodeType":"389","messageId":"390","endLine":167,"endColumn":35},{"ruleId":"387","severity":1,"message":"388","line":178,"column":32,"nodeType":"389","messageId":"390","endLine":178,"endColumn":34},{"ruleId":"379","severity":1,"message":"453","line":2,"column":26,"nodeType":"381","messageId":"382","endLine":2,"endColumn":38},{"ruleId":"379","severity":1,"message":"460","line":8,"column":10,"nodeType":"381","messageId":"382","endLine":8,"endColumn":18},{"ruleId":"379","severity":1,"message":"461","line":10,"column":5,"nodeType":"381","messageId":"382","endLine":10,"endColumn":20},{"ruleId":"379","severity":1,"message":"462","line":78,"column":10,"nodeType":"381","messageId":"382","endLine":78,"endColumn":17},{"ruleId":"379","severity":1,"message":"463","line":85,"column":26,"nodeType":"381","messageId":"382","endLine":85,"endColumn":43},{"ruleId":"379","severity":1,"message":"446","line":86,"column":10,"nodeType":"381","messageId":"382","endLine":86,"endColumn":16},{"ruleId":"379","severity":1,"message":"464","line":86,"column":18,"nodeType":"381","messageId":"382","endLine":86,"endColumn":27},{"ruleId":"379","severity":1,"message":"465","line":91,"column":10,"nodeType":"381","messageId":"382","endLine":91,"endColumn":28},{"ruleId":"379","severity":1,"message":"452","line":99,"column":9,"nodeType":"381","messageId":"382","endLine":99,"endColumn":20},{"ruleId":"379","severity":1,"message":"466","line":101,"column":9,"nodeType":"381","messageId":"382","endLine":101,"endColumn":16},{"ruleId":"379","severity":1,"message":"467","line":105,"column":12,"nodeType":"381","messageId":"382","endLine":105,"endColumn":17},{"ruleId":"379","severity":1,"message":"466","line":106,"column":9,"nodeType":"381","messageId":"382","endLine":106,"endColumn":16},{"ruleId":"387","severity":1,"message":"468","line":121,"column":13,"nodeType":"389","messageId":"390","endLine":121,"endColumn":15},{"ruleId":"387","severity":1,"message":"468","line":121,"column":57,"nodeType":"389","messageId":"390","endLine":121,"endColumn":59},{"ruleId":"387","severity":1,"message":"468","line":140,"column":13,"nodeType":"389","messageId":"390","endLine":140,"endColumn":15},{"ruleId":"387","severity":1,"message":"468","line":140,"column":27,"nodeType":"389","messageId":"390","endLine":140,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":142,"column":14,"nodeType":"389","messageId":"390","endLine":142,"endColumn":16},{"ruleId":"387","severity":1,"message":"468","line":165,"column":17,"nodeType":"389","messageId":"390","endLine":165,"endColumn":19},{"ruleId":"387","severity":1,"message":"468","line":165,"column":31,"nodeType":"389","messageId":"390","endLine":165,"endColumn":33},{"ruleId":"387","severity":1,"message":"468","line":185,"column":59,"nodeType":"389","messageId":"390","endLine":185,"endColumn":61},{"ruleId":"387","severity":1,"message":"468","line":185,"column":73,"nodeType":"389","messageId":"390","endLine":185,"endColumn":75},{"ruleId":"387","severity":1,"message":"468","line":185,"column":86,"nodeType":"389","messageId":"390","endLine":185,"endColumn":88},{"ruleId":"387","severity":1,"message":"388","line":194,"column":16,"nodeType":"389","messageId":"390","endLine":194,"endColumn":18},{"ruleId":"379","severity":1,"message":"469","line":10,"column":10,"nodeType":"381","messageId":"382","endLine":10,"endColumn":17},{"ruleId":"379","severity":1,"message":"470","line":10,"column":19,"nodeType":"381","messageId":"382","endLine":10,"endColumn":29},{"ruleId":"379","severity":1,"message":"471","line":9,"column":5,"nodeType":"381","messageId":"382","endLine":9,"endColumn":15},{"ruleId":"379","severity":1,"message":"472","line":22,"column":7,"nodeType":"381","messageId":"382","endLine":22,"endColumn":11},{"ruleId":"379","severity":1,"message":"473","line":23,"column":7,"nodeType":"381","messageId":"382","endLine":23,"endColumn":15},{"ruleId":"379","severity":1,"message":"474","line":24,"column":7,"nodeType":"381","messageId":"382","endLine":24,"endColumn":15},{"ruleId":"379","severity":1,"message":"475","line":25,"column":7,"nodeType":"381","messageId":"382","endLine":25,"endColumn":10},{"ruleId":"379","severity":1,"message":"476","line":26,"column":7,"nodeType":"381","messageId":"382","endLine":26,"endColumn":12},{"ruleId":"379","severity":1,"message":"477","line":27,"column":7,"nodeType":"381","messageId":"382","endLine":27,"endColumn":10},{"ruleId":"379","severity":1,"message":"417","line":8,"column":5,"nodeType":"381","messageId":"382","endLine":8,"endColumn":10},{"ruleId":"379","severity":1,"message":"478","line":13,"column":10,"nodeType":"381","messageId":"382","endLine":13,"endColumn":18},{"ruleId":"379","severity":1,"message":"479","line":13,"column":20,"nodeType":"381","messageId":"382","endLine":13,"endColumn":31},{"ruleId":"429","severity":1,"message":"480","line":74,"column":6,"nodeType":"431","endLine":74,"endColumn":16,"suggestions":"481"},"no-native-reassign",["482"],"no-negated-in-lhs",["483"],"no-unused-vars","'LOCAL' is assigned a value but never used.","Identifier","unusedVar","'FilePdfTwoTone' is defined but never used.","'Modal' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'exportToPdf' is assigned a value but never used.","'Table' is defined but never used.","'Tag' is defined but never used.","'Radio' is defined but never used.","'AutoComplete' is defined but never used.","'getDoctorsByTeam' is defined but never used.","'createDoctor' is defined but never used.","'placeGrupo' is assigned a value but never used.","'editarMedico' is assigned a value but never used.","'hanldeSelectNombre' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","'getRoleById' is defined but never used.","'findById' is defined but never used.","'render' is defined but never used.","'roleOptionsChecked' is defined but never used.","'Tooltip' is defined but never used.","'Upload' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'OutTable' is defined but never used.","'teams' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'dataLoaded' is assigned a value but never used.","'isFormInvalid' is assigned a value but never used.","'rows' is assigned a value but never used.","'cols' is assigned a value but never used.","'uploadedFileName' is assigned a value but never used.","'upgradeDoctors' is defined but never used.","'handleModalImportOk' is assigned a value but never used.","'props' is assigned a value but never used.","'fileHandler' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'listar'. Either include it or remove the dependency array.","ArrayExpression",["484"],"'editar' is assigned a value but never used.","'setFilterServiceTable' is assigned a value but never used.","'createSchool' is defined but never used.","'getSchools' is defined but never used.","'actualizarSchool' is defined but never used.","'getDoctors' is defined but never used.","'getDoctorsByTeamTipo' is defined but never used.","'getTeamIdCategoriaTodos' is defined but never used.","'getFindAllByTeamIdGrupo' is defined but never used.","'createDoctorGrupo' is defined but never used.","'borrarDoctorGrupo' is defined but never used.","'createTeams' is defined but never used.","'actualizarTeams' is defined but never used.","'idTeam' is assigned a value but never used.","'viewPdfServiciosDoctorFilterSpecialty' is defined but never used.","'getSpecialties' is defined but never used.","'meses' is assigned a value but never used.","'filterMesOn' is assigned a value but never used.","'idMes' is assigned a value but never used.","'clearFilter' is assigned a value but never used.","'EditOutlined' is defined but never used.","'getServiciosDoctorByServiceId' is assigned a value but never used.","'Container' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'moment' is defined but never used.","'validationDoctorData' is assigned a value but never used.","'getTeams' is defined but never used.","'aniosAcademicos' is assigned a value but never used.","'periodo' is assigned a value but never used.","'setPlaceCategoria' is assigned a value but never used.","'setIdTeam' is assigned a value but never used.","'anioAcademicoCombo' is assigned a value but never used.","'lstMain' is assigned a value but never used.","'clear' is defined but never used.","Expected '!==' and instead saw '!='.","'isAdmin' is assigned a value but never used.","'setIsAdmin' is assigned a value but never used.","'diasSemana' is assigned a value but never used.","'days' is assigned a value but never used.","'daysName' is assigned a value but never used.","'agrupado' is assigned a value but never used.","'mes' is assigned a value but never used.","'turno' is assigned a value but never used.","'dia' is assigned a value but never used.","'teamslst' is assigned a value but never used.","'setTeamslst' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dia.grupo'. Either include it or remove the dependency array. If 'setTeamId' needs the current value of 'dia.grupo', you can also switch to useReducer instead of useState and read 'dia.grupo' in the reducer.",["485"],"no-global-assign","no-unsafe-negation",{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},"Update the dependencies array to be: [listar]",{"range":"490","text":"491"},"Update the dependencies array to be: [dia.grupo, isBgGray]",{"range":"492","text":"493"},[4184,4186],"[listar]",[1627,1637],"[dia.grupo, isBgGray]"]